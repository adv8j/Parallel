// Generated by GNU Bison 3.8.2.
// Report bugs to <bug-bison@gnu.org>.
// Home page: <https://www.gnu.org/software/bison/>.

digraph "parser.y"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="State 0\n\l  0 $accept: • program $end\l"]
  0 -> 1 [style=dotted]
  0 -> 2 [style=solid label="MINUS"]
  0 -> 3 [style=solid label="NOT"]
  0 -> 4 [style=solid label="SEMICOLON"]
  0 -> 5 [style=solid label="LPAREN"]
  0 -> 6 [style=solid label="LBRACE"]
  0 -> 7 [style=solid label="TASKGROUP"]
  0 -> 8 [style=solid label="PARALLEL"]
  0 -> 9 [style=solid label="INT"]
  0 -> 10 [style=solid label="CHAR"]
  0 -> 11 [style=solid label="LONG"]
  0 -> 12 [style=solid label="BOOL"]
  0 -> 13 [style=solid label="FLOAT"]
  0 -> 14 [style=solid label="STRING"]
  0 -> 15 [style=solid label="FUNC"]
  0 -> 16 [style=solid label="STRUCT"]
  0 -> 17 [style=solid label="IF"]
  0 -> 18 [style=solid label="FOR"]
  0 -> 19 [style=solid label="TRUE"]
  0 -> 20 [style=solid label="FALSE"]
  0 -> 21 [style=solid label="IDENTIFIER"]
  0 -> 22 [style=solid label="INT_LITERAL"]
  0 -> 23 [style=solid label="FLOAT_LITERAL"]
  0 -> 24 [style=solid label="STRING_LITERAL"]
  0 -> 25 [style=solid label="CHARACTER_LITERAL"]
  0 -> 26 [style=dashed label="program"]
  0 -> 27 [style=dashed label="statement_list"]
  0 -> 28 [style=dashed label="one_or_more_statements"]
  0 -> 29 [style=dashed label="generic_dtypes"]
  0 -> 30 [style=dashed label="dtype"]
  0 -> 31 [style=dashed label="array"]
  0 -> 32 [style=dashed label="array_element"]
  0 -> 33 [style=dashed label="statement"]
  0 -> 34 [style=dashed label="compound_statement"]
  0 -> 35 [style=dashed label="struct_declaration"]
  0 -> 36 [style=dashed label="expression_statement"]
  0 -> 37 [style=dashed label="expression"]
  0 -> 38 [style=dashed label="function_call"]
  0 -> 39 [style=dashed label="unary_operator"]
  0 -> 40 [style=dashed label="arithmetic_expression"]
  0 -> 41 [style=dashed label="assignment_expression"]
  0 -> 42 [style=dashed label="unary_expression"]
  0 -> 43 [style=dashed label="comparison_expression"]
  0 -> 44 [style=dashed label="logical_expression"]
  0 -> 45 [style=dashed label="declaration_statement"]
  0 -> 46 [style=dashed label="iterative_statement"]
  0 -> 47 [style=dashed label="selection_statement"]
  0 -> 48 [style=dashed label="function_declaration"]
  0 -> 49 [style=dashed label="parallel_statement"]
  0 -> 50 [style=dashed label="taskgroup_statement"]
  0 -> 51 [style=dashed label="array_literal"]
  0 -> 52 [style=dashed label="literals"]
  0 -> 53 [style=dashed label="value"]
  0 -> 54 [style=dashed label="identifier_chain"]
  0 -> "0R3" [label="[$end]", style=solid]
 "0R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  1 [label="State 1\n\l 13 generic_dtypes: error •\l"]
  1 -> "1R13" [style=solid]
 "1R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  2 [label="State 2\n\l 64 unary_operator: MINUS •\l"]
  2 -> "2R64" [style=solid]
 "2R64" [label="R64", fillcolor=3, shape=diamond, style=filled]
  3 [label="State 3\n\l 65 unary_operator: NOT •\l"]
  3 -> "3R65" [style=solid]
 "3R65" [label="R65", fillcolor=3, shape=diamond, style=filled]
  4 [label="State 4\n\l 51 expression_statement: SEMICOLON •\l"]
  4 -> "4R51" [style=solid]
 "4R51" [label="R51", fillcolor=3, shape=diamond, style=filled]
  5 [label="State 5\n\l 53 expression: LPAREN • expression RPAREN\l"]
  5 -> 2 [style=solid label="MINUS"]
  5 -> 3 [style=solid label="NOT"]
  5 -> 5 [style=solid label="LPAREN"]
  5 -> 19 [style=solid label="TRUE"]
  5 -> 20 [style=solid label="FALSE"]
  5 -> 21 [style=solid label="IDENTIFIER"]
  5 -> 22 [style=solid label="INT_LITERAL"]
  5 -> 23 [style=solid label="FLOAT_LITERAL"]
  5 -> 24 [style=solid label="STRING_LITERAL"]
  5 -> 25 [style=solid label="CHARACTER_LITERAL"]
  5 -> 32 [style=dashed label="array_element"]
  5 -> 55 [style=dashed label="expression"]
  5 -> 38 [style=dashed label="function_call"]
  5 -> 39 [style=dashed label="unary_operator"]
  5 -> 40 [style=dashed label="arithmetic_expression"]
  5 -> 41 [style=dashed label="assignment_expression"]
  5 -> 42 [style=dashed label="unary_expression"]
  5 -> 43 [style=dashed label="comparison_expression"]
  5 -> 44 [style=dashed label="logical_expression"]
  5 -> 51 [style=dashed label="array_literal"]
  5 -> 52 [style=dashed label="literals"]
  5 -> 53 [style=dashed label="value"]
  5 -> 54 [style=dashed label="identifier_chain"]
  6 [label="State 6\n\l 45 compound_statement: LBRACE • inner_statement RBRACE\l"]
  6 -> 1 [style=dotted]
  6 -> 2 [style=solid label="MINUS"]
  6 -> 3 [style=solid label="NOT"]
  6 -> 4 [style=solid label="SEMICOLON"]
  6 -> 5 [style=solid label="LPAREN"]
  6 -> 6 [style=solid label="LBRACE"]
  6 -> 8 [style=solid label="PARALLEL"]
  6 -> 9 [style=solid label="INT"]
  6 -> 10 [style=solid label="CHAR"]
  6 -> 11 [style=solid label="LONG"]
  6 -> 12 [style=solid label="BOOL"]
  6 -> 13 [style=solid label="FLOAT"]
  6 -> 14 [style=solid label="STRING"]
  6 -> 56 [style=solid label="RETURN"]
  6 -> 57 [style=solid label="CONTINUE"]
  6 -> 58 [style=solid label="BREAK"]
  6 -> 59 [style=solid label="STRUCT"]
  6 -> 17 [style=solid label="IF"]
  6 -> 18 [style=solid label="FOR"]
  6 -> 19 [style=solid label="TRUE"]
  6 -> 20 [style=solid label="FALSE"]
  6 -> 21 [style=solid label="IDENTIFIER"]
  6 -> 22 [style=solid label="INT_LITERAL"]
  6 -> 23 [style=solid label="FLOAT_LITERAL"]
  6 -> 24 [style=solid label="STRING_LITERAL"]
  6 -> 25 [style=solid label="CHARACTER_LITERAL"]
  6 -> 29 [style=dashed label="generic_dtypes"]
  6 -> 30 [style=dashed label="dtype"]
  6 -> 31 [style=dashed label="array"]
  6 -> 32 [style=dashed label="array_element"]
  6 -> 60 [style=dashed label="inner_statement"]
  6 -> 61 [style=dashed label="one_or_more_inner_statements"]
  6 -> 62 [style=dashed label="inner_statement_list"]
  6 -> 63 [style=dashed label="return_statement"]
  6 -> 64 [style=dashed label="compound_statement"]
  6 -> 65 [style=dashed label="expression_statement"]
  6 -> 37 [style=dashed label="expression"]
  6 -> 38 [style=dashed label="function_call"]
  6 -> 39 [style=dashed label="unary_operator"]
  6 -> 40 [style=dashed label="arithmetic_expression"]
  6 -> 41 [style=dashed label="assignment_expression"]
  6 -> 42 [style=dashed label="unary_expression"]
  6 -> 43 [style=dashed label="comparison_expression"]
  6 -> 44 [style=dashed label="logical_expression"]
  6 -> 66 [style=dashed label="declaration_statement"]
  6 -> 67 [style=dashed label="iterative_statement"]
  6 -> 68 [style=dashed label="selection_statement"]
  6 -> 69 [style=dashed label="parallel_statement"]
  6 -> 51 [style=dashed label="array_literal"]
  6 -> 52 [style=dashed label="literals"]
  6 -> 53 [style=dashed label="value"]
  6 -> 54 [style=dashed label="identifier_chain"]
  6 -> "6R32" [label="[RBRACE]", style=solid]
 "6R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  7 [label="State 7\n\l149 taskgroup_statement: TASKGROUP • IDENTIFIER LPAREN taskgroup_argument_list RPAREN LBRACE taskgroup_definition RBRACE SEMICOLON\l150                    | TASKGROUP • IDENTIFIER LBRACE taskgroup_definition RBRACE SEMICOLON\l"]
  7 -> 70 [style=solid label="IDENTIFIER"]
  8 [label="State 8\n\l122 parallel_statement: PARALLEL • LPAREN parallel_stmt_argument_list RPAREN compound_statement\l123                   | PARALLEL • compound_statement\l124                   | PARALLEL • LPAREN parallel_stmt_argument_list RPAREN iterative_statement\l"]
  8 -> 71 [style=solid label="LPAREN"]
  8 -> 6 [style=solid label="LBRACE"]
  8 -> 72 [style=dashed label="compound_statement"]
  9 [label="State 9\n\l  6 generic_dtypes: INT •\l"]
  9 -> "9R6" [style=solid]
 "9R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  10 [label="State 10\n\l 11 generic_dtypes: CHAR •\l"]
  10 -> "10R11" [style=solid]
 "10R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  11 [label="State 11\n\l  7 generic_dtypes: LONG •\l"]
  11 -> "11R7" [style=solid]
 "11R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  12 [label="State 12\n\l 10 generic_dtypes: BOOL •\l"]
  12 -> "12R10" [style=solid]
 "12R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  13 [label="State 13\n\l  8 generic_dtypes: FLOAT •\l"]
  13 -> "13R8" [style=solid]
 "13R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  14 [label="State 14\n\l  9 generic_dtypes: STRING •\l"]
  14 -> "14R9" [style=solid]
 "14R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
  15 [label="State 15\n\l112 function_declaration: FUNC • IDENTIFIER dtype LPAREN parameter_list RPAREN compound_statement\l"]
  15 -> 73 [style=solid label="IDENTIFIER"]
  16 [label="State 16\n\l 12 generic_dtypes: STRUCT • IDENTIFIER\l 46 struct_declaration: STRUCT • IDENTIFIER LBRACE member_data_list RBRACE SEMICOLON\l"]
  16 -> 74 [style=solid label="IDENTIFIER"]
  17 [label="State 17\n\l108 selection_statement: IF • LPAREN expression RPAREN compound_statement if_chain_statement\l109                    | IF • LPAREN expression RPAREN compound_statement ELSE compound_statement\l"]
  17 -> 75 [style=solid label="LPAREN"]
  18 [label="State 18\n\l100 iterative_statement: FOR • LPAREN expression_statement expression_statement expression RPAREN compound_statement\l101                    | FOR • iterator IN expression compound_statement\l"]
  18 -> 76 [style=solid label="LPAREN"]
  18 -> 77 [style=solid label="REFERENCE"]
  18 -> 78 [style=solid label="IDENTIFIER"]
  18 -> 79 [style=dashed label="iterator"]
  19 [label="State 19\n\l222 literals: TRUE •\l"]
  19 -> "19R222" [style=solid]
 "19R222" [label="R222", fillcolor=3, shape=diamond, style=filled]
  20 [label="State 20\n\l223 literals: FALSE •\l"]
  20 -> "20R223" [style=solid]
 "20R223" [label="R223", fillcolor=3, shape=diamond, style=filled]
  21 [label="State 21\n\l 17 array_element: IDENTIFIER • dims\l 60 function_call: IDENTIFIER • LPAREN function_call_tail\l229 identifier_chain: IDENTIFIER •\l"]
  21 -> 80 [style=solid label="LPAREN"]
  21 -> 81 [style=solid label="LBRACKET"]
  21 -> 82 [style=dashed label="dims"]
  21 -> "21R229" [style=solid]
 "21R229" [label="R229", fillcolor=3, shape=diamond, style=filled]
  22 [label="State 22\n\l218 literals: INT_LITERAL •\l"]
  22 -> "22R218" [style=solid]
 "22R218" [label="R218", fillcolor=3, shape=diamond, style=filled]
  23 [label="State 23\n\l219 literals: FLOAT_LITERAL •\l"]
  23 -> "23R219" [style=solid]
 "23R219" [label="R219", fillcolor=3, shape=diamond, style=filled]
  24 [label="State 24\n\l220 literals: STRING_LITERAL •\l"]
  24 -> "24R220" [style=solid]
 "24R220" [label="R220", fillcolor=3, shape=diamond, style=filled]
  25 [label="State 25\n\l221 literals: CHARACTER_LITERAL •\l"]
  25 -> "25R221" [style=solid]
 "25R221" [label="R221", fillcolor=3, shape=diamond, style=filled]
  26 [label="State 26\n\l  0 $accept: program • $end\l"]
  26 -> 83 [style=solid label="$end"]
  27 [label="State 27\n\l  1 program: statement_list •\l"]
  27 -> "27R1" [style=solid]
 "27R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  28 [label="State 28\n\l  2 statement_list: one_or_more_statements •\l  4 one_or_more_statements: one_or_more_statements • statement\l"]
  28 -> 1 [style=dotted]
  28 -> 2 [style=solid label="MINUS"]
  28 -> 3 [style=solid label="NOT"]
  28 -> 4 [style=solid label="SEMICOLON"]
  28 -> 5 [style=solid label="LPAREN"]
  28 -> 6 [style=solid label="LBRACE"]
  28 -> 7 [style=solid label="TASKGROUP"]
  28 -> 8 [style=solid label="PARALLEL"]
  28 -> 9 [style=solid label="INT"]
  28 -> 10 [style=solid label="CHAR"]
  28 -> 11 [style=solid label="LONG"]
  28 -> 12 [style=solid label="BOOL"]
  28 -> 13 [style=solid label="FLOAT"]
  28 -> 14 [style=solid label="STRING"]
  28 -> 15 [style=solid label="FUNC"]
  28 -> 16 [style=solid label="STRUCT"]
  28 -> 17 [style=solid label="IF"]
  28 -> 18 [style=solid label="FOR"]
  28 -> 19 [style=solid label="TRUE"]
  28 -> 20 [style=solid label="FALSE"]
  28 -> 21 [style=solid label="IDENTIFIER"]
  28 -> 22 [style=solid label="INT_LITERAL"]
  28 -> 23 [style=solid label="FLOAT_LITERAL"]
  28 -> 24 [style=solid label="STRING_LITERAL"]
  28 -> 25 [style=solid label="CHARACTER_LITERAL"]
  28 -> 29 [style=dashed label="generic_dtypes"]
  28 -> 30 [style=dashed label="dtype"]
  28 -> 31 [style=dashed label="array"]
  28 -> 32 [style=dashed label="array_element"]
  28 -> 84 [style=dashed label="statement"]
  28 -> 34 [style=dashed label="compound_statement"]
  28 -> 35 [style=dashed label="struct_declaration"]
  28 -> 36 [style=dashed label="expression_statement"]
  28 -> 37 [style=dashed label="expression"]
  28 -> 38 [style=dashed label="function_call"]
  28 -> 39 [style=dashed label="unary_operator"]
  28 -> 40 [style=dashed label="arithmetic_expression"]
  28 -> 41 [style=dashed label="assignment_expression"]
  28 -> 42 [style=dashed label="unary_expression"]
  28 -> 43 [style=dashed label="comparison_expression"]
  28 -> 44 [style=dashed label="logical_expression"]
  28 -> 45 [style=dashed label="declaration_statement"]
  28 -> 46 [style=dashed label="iterative_statement"]
  28 -> 47 [style=dashed label="selection_statement"]
  28 -> 48 [style=dashed label="function_declaration"]
  28 -> 49 [style=dashed label="parallel_statement"]
  28 -> 50 [style=dashed label="taskgroup_statement"]
  28 -> 51 [style=dashed label="array_literal"]
  28 -> 52 [style=dashed label="literals"]
  28 -> 53 [style=dashed label="value"]
  28 -> 54 [style=dashed label="identifier_chain"]
  28 -> "28R2" [label="[$end]", style=solid]
 "28R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  29 [label="State 29\n\l 14 dtype: generic_dtypes •\l 16 array: generic_dtypes • dims initializer_dims\l"]
  29 -> 81 [style=solid label="LBRACKET"]
  29 -> 85 [style=dashed label="dims"]
  29 -> "29R14" [style=solid]
 "29R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  30 [label="State 30\n\l 86 declaration_statement: dtype • declaration_list SEMICOLON\l"]
  30 -> 86 [style=solid label="REFERENCE"]
  30 -> 87 [style=solid label="IDENTIFIER"]
  30 -> 88 [style=dashed label="declaration_list"]
  30 -> 89 [style=dashed label="declaration"]
  31 [label="State 31\n\l 15 dtype: array •\l"]
  31 -> "31R15" [style=solid]
 "31R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
  32 [label="State 32\n\l227 value: array_element •\l"]
  32 -> "32R227" [style=solid]
 "32R227" [label="R227", fillcolor=3, shape=diamond, style=filled]
  33 [label="State 33\n\l  5 one_or_more_statements: statement •\l"]
  33 -> "33R5" [style=solid]
 "33R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  34 [label="State 34\n\l 25 statement: compound_statement •\l"]
  34 -> "34R25" [style=solid]
 "34R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  35 [label="State 35\n\l 30 statement: struct_declaration •\l"]
  35 -> "35R30" [style=solid]
 "35R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  36 [label="State 36\n\l 24 statement: expression_statement •\l"]
  36 -> "36R24" [style=solid]
 "36R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
  37 [label="State 37\n\l 50 expression_statement: expression • SEMICOLON\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  37 -> 90 [style=solid label="ASSIGN"]
  37 -> 91 [style=solid label="PLUS"]
  37 -> 92 [style=solid label="MINUS"]
  37 -> 93 [style=solid label="MUL"]
  37 -> 94 [style=solid label="DIV"]
  37 -> 95 [style=solid label="MOD"]
  37 -> 96 [style=solid label="EQ"]
  37 -> 97 [style=solid label="NEQ"]
  37 -> 98 [style=solid label="GT"]
  37 -> 99 [style=solid label="LT"]
  37 -> 100 [style=solid label="GTE"]
  37 -> 101 [style=solid label="LTE"]
  37 -> 102 [style=solid label="AND"]
  37 -> 103 [style=solid label="OR"]
  37 -> 104 [style=solid label="ADD_ASSIGN"]
  37 -> 105 [style=solid label="SUB_ASSIGN"]
  37 -> 106 [style=solid label="MUL_ASSIGN"]
  37 -> 107 [style=solid label="DIV_ASSIGN"]
  37 -> 108 [style=solid label="MOD_ASSIGN"]
  37 -> 109 [style=solid label="SEMICOLON"]
  37 -> 110 [style=solid label="RANGE"]
  37 -> 111 [style=solid label="RANGE_INCL"]
  37 -> 112 [style=dashed label="range"]
  38 [label="State 38\n\l 59 expression: function_call •\l"]
  38 -> "38R59" [style=solid]
 "38R59" [label="R59", fillcolor=3, shape=diamond, style=filled]
  39 [label="State 39\n\l 77 unary_expression: unary_operator • number\l"]
  39 -> 113 [style=solid label="IDENTIFIER"]
  39 -> 114 [style=solid label="INT_LITERAL"]
  39 -> 115 [style=dashed label="number"]
  40 [label="State 40\n\l 55 expression: arithmetic_expression •\l"]
  40 -> "40R55" [style=solid]
 "40R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  41 [label="State 41\n\l 54 expression: assignment_expression •\l"]
  41 -> "41R54" [style=solid]
 "41R54" [label="R54", fillcolor=3, shape=diamond, style=filled]
  42 [label="State 42\n\l 58 expression: unary_expression •\l"]
  42 -> "42R58" [style=solid]
 "42R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
  43 [label="State 43\n\l 57 expression: comparison_expression •\l"]
  43 -> "43R57" [style=solid]
 "43R57" [label="R57", fillcolor=3, shape=diamond, style=filled]
  44 [label="State 44\n\l 56 expression: logical_expression •\l"]
  44 -> "44R56" [style=solid]
 "44R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
  45 [label="State 45\n\l 28 statement: declaration_statement •\l"]
  45 -> "45R28" [style=solid]
 "45R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
  46 [label="State 46\n\l 22 statement: iterative_statement •\l"]
  46 -> "46R22" [style=solid]
 "46R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  47 [label="State 47\n\l 23 statement: selection_statement •\l"]
  47 -> "47R23" [style=solid]
 "47R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
  48 [label="State 48\n\l 26 statement: function_declaration •\l"]
  48 -> "48R26" [style=solid]
 "48R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  49 [label="State 49\n\l 29 statement: parallel_statement •\l"]
  49 -> "49R29" [style=solid]
 "49R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
  50 [label="State 50\n\l 27 statement: taskgroup_statement •\l"]
  50 -> "50R27" [style=solid]
 "50R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
  51 [label="State 51\n\l224 literals: array_literal •\l"]
  51 -> "51R224" [style=solid]
 "51R224" [label="R224", fillcolor=3, shape=diamond, style=filled]
  52 [label="State 52\n\l225 value: literals •\l"]
  52 -> "52R225" [style=solid]
 "52R225" [label="R225", fillcolor=3, shape=diamond, style=filled]
  53 [label="State 53\n\l 52 expression: value •\l"]
  53 -> "53R52" [style=solid]
 "53R52" [label="R52", fillcolor=3, shape=diamond, style=filled]
  54 [label="State 54\n\l226 value: identifier_chain •\l228 identifier_chain: identifier_chain • DOT IDENTIFIER\l"]
  54 -> 116 [style=solid label="DOT"]
  54 -> "54R226" [style=solid]
 "54R226" [label="R226", fillcolor=3, shape=diamond, style=filled]
  55 [label="State 55\n\l 53 expression: LPAREN expression • RPAREN\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  55 -> 90 [style=solid label="ASSIGN"]
  55 -> 91 [style=solid label="PLUS"]
  55 -> 92 [style=solid label="MINUS"]
  55 -> 93 [style=solid label="MUL"]
  55 -> 94 [style=solid label="DIV"]
  55 -> 95 [style=solid label="MOD"]
  55 -> 96 [style=solid label="EQ"]
  55 -> 97 [style=solid label="NEQ"]
  55 -> 98 [style=solid label="GT"]
  55 -> 99 [style=solid label="LT"]
  55 -> 100 [style=solid label="GTE"]
  55 -> 101 [style=solid label="LTE"]
  55 -> 102 [style=solid label="AND"]
  55 -> 103 [style=solid label="OR"]
  55 -> 104 [style=solid label="ADD_ASSIGN"]
  55 -> 105 [style=solid label="SUB_ASSIGN"]
  55 -> 106 [style=solid label="MUL_ASSIGN"]
  55 -> 107 [style=solid label="DIV_ASSIGN"]
  55 -> 108 [style=solid label="MOD_ASSIGN"]
  55 -> 117 [style=solid label="RPAREN"]
  55 -> 110 [style=solid label="RANGE"]
  55 -> 111 [style=solid label="RANGE_INCL"]
  55 -> 112 [style=dashed label="range"]
  56 [label="State 56\n\l 42 return_statement: RETURN • expression SEMICOLON\l"]
  56 -> 2 [style=solid label="MINUS"]
  56 -> 3 [style=solid label="NOT"]
  56 -> 5 [style=solid label="LPAREN"]
  56 -> 19 [style=solid label="TRUE"]
  56 -> 20 [style=solid label="FALSE"]
  56 -> 21 [style=solid label="IDENTIFIER"]
  56 -> 22 [style=solid label="INT_LITERAL"]
  56 -> 23 [style=solid label="FLOAT_LITERAL"]
  56 -> 24 [style=solid label="STRING_LITERAL"]
  56 -> 25 [style=solid label="CHARACTER_LITERAL"]
  56 -> 32 [style=dashed label="array_element"]
  56 -> 118 [style=dashed label="expression"]
  56 -> 38 [style=dashed label="function_call"]
  56 -> 39 [style=dashed label="unary_operator"]
  56 -> 40 [style=dashed label="arithmetic_expression"]
  56 -> 41 [style=dashed label="assignment_expression"]
  56 -> 42 [style=dashed label="unary_expression"]
  56 -> 43 [style=dashed label="comparison_expression"]
  56 -> 44 [style=dashed label="logical_expression"]
  56 -> 51 [style=dashed label="array_literal"]
  56 -> 52 [style=dashed label="literals"]
  56 -> 53 [style=dashed label="value"]
  56 -> 54 [style=dashed label="identifier_chain"]
  57 [label="State 57\n\l 44 return_statement: CONTINUE • SEMICOLON\l"]
  57 -> 119 [style=solid label="SEMICOLON"]
  58 [label="State 58\n\l 43 return_statement: BREAK • SEMICOLON\l"]
  58 -> 120 [style=solid label="SEMICOLON"]
  59 [label="State 59\n\l 12 generic_dtypes: STRUCT • IDENTIFIER\l"]
  59 -> 121 [style=solid label="IDENTIFIER"]
  60 [label="State 60\n\l 45 compound_statement: LBRACE inner_statement • RBRACE\l"]
  60 -> 122 [style=solid label="RBRACE"]
  61 [label="State 61\n\l 31 inner_statement: one_or_more_inner_statements •\l 33 one_or_more_inner_statements: one_or_more_inner_statements • inner_statement_list\l"]
  61 -> 1 [style=dotted]
  61 -> 2 [style=solid label="MINUS"]
  61 -> 3 [style=solid label="NOT"]
  61 -> 4 [style=solid label="SEMICOLON"]
  61 -> 5 [style=solid label="LPAREN"]
  61 -> 6 [style=solid label="LBRACE"]
  61 -> 8 [style=solid label="PARALLEL"]
  61 -> 9 [style=solid label="INT"]
  61 -> 10 [style=solid label="CHAR"]
  61 -> 11 [style=solid label="LONG"]
  61 -> 12 [style=solid label="BOOL"]
  61 -> 13 [style=solid label="FLOAT"]
  61 -> 14 [style=solid label="STRING"]
  61 -> 56 [style=solid label="RETURN"]
  61 -> 57 [style=solid label="CONTINUE"]
  61 -> 58 [style=solid label="BREAK"]
  61 -> 59 [style=solid label="STRUCT"]
  61 -> 17 [style=solid label="IF"]
  61 -> 18 [style=solid label="FOR"]
  61 -> 19 [style=solid label="TRUE"]
  61 -> 20 [style=solid label="FALSE"]
  61 -> 21 [style=solid label="IDENTIFIER"]
  61 -> 22 [style=solid label="INT_LITERAL"]
  61 -> 23 [style=solid label="FLOAT_LITERAL"]
  61 -> 24 [style=solid label="STRING_LITERAL"]
  61 -> 25 [style=solid label="CHARACTER_LITERAL"]
  61 -> 29 [style=dashed label="generic_dtypes"]
  61 -> 30 [style=dashed label="dtype"]
  61 -> 31 [style=dashed label="array"]
  61 -> 32 [style=dashed label="array_element"]
  61 -> 123 [style=dashed label="inner_statement_list"]
  61 -> 63 [style=dashed label="return_statement"]
  61 -> 64 [style=dashed label="compound_statement"]
  61 -> 65 [style=dashed label="expression_statement"]
  61 -> 37 [style=dashed label="expression"]
  61 -> 38 [style=dashed label="function_call"]
  61 -> 39 [style=dashed label="unary_operator"]
  61 -> 40 [style=dashed label="arithmetic_expression"]
  61 -> 41 [style=dashed label="assignment_expression"]
  61 -> 42 [style=dashed label="unary_expression"]
  61 -> 43 [style=dashed label="comparison_expression"]
  61 -> 44 [style=dashed label="logical_expression"]
  61 -> 66 [style=dashed label="declaration_statement"]
  61 -> 67 [style=dashed label="iterative_statement"]
  61 -> 68 [style=dashed label="selection_statement"]
  61 -> 69 [style=dashed label="parallel_statement"]
  61 -> 51 [style=dashed label="array_literal"]
  61 -> 52 [style=dashed label="literals"]
  61 -> 53 [style=dashed label="value"]
  61 -> 54 [style=dashed label="identifier_chain"]
  61 -> "61R31" [label="[RBRACE]", style=solid]
 "61R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
  62 [label="State 62\n\l 34 one_or_more_inner_statements: inner_statement_list •\l"]
  62 -> "62R34" [style=solid]
 "62R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  63 [label="State 63\n\l 41 inner_statement_list: return_statement •\l"]
  63 -> "63R41" [style=solid]
 "63R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  64 [label="State 64\n\l 38 inner_statement_list: compound_statement •\l"]
  64 -> "64R38" [style=solid]
 "64R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
  65 [label="State 65\n\l 37 inner_statement_list: expression_statement •\l"]
  65 -> "65R37" [style=solid]
 "65R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
  66 [label="State 66\n\l 39 inner_statement_list: declaration_statement •\l"]
  66 -> "66R39" [style=solid]
 "66R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
  67 [label="State 67\n\l 35 inner_statement_list: iterative_statement •\l"]
  67 -> "67R35" [style=solid]
 "67R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
  68 [label="State 68\n\l 36 inner_statement_list: selection_statement •\l"]
  68 -> "68R36" [style=solid]
 "68R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
  69 [label="State 69\n\l 40 inner_statement_list: parallel_statement •\l"]
  69 -> "69R40" [style=solid]
 "69R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
  70 [label="State 70\n\l149 taskgroup_statement: TASKGROUP IDENTIFIER • LPAREN taskgroup_argument_list RPAREN LBRACE taskgroup_definition RBRACE SEMICOLON\l150                    | TASKGROUP IDENTIFIER • LBRACE taskgroup_definition RBRACE SEMICOLON\l"]
  70 -> 124 [style=solid label="LPAREN"]
  70 -> 125 [style=solid label="LBRACE"]
  71 [label="State 71\n\l122 parallel_statement: PARALLEL LPAREN • parallel_stmt_argument_list RPAREN compound_statement\l124                   | PARALLEL LPAREN • parallel_stmt_argument_list RPAREN iterative_statement\l"]
  71 -> 126 [style=solid label="PRIVATE"]
  71 -> 127 [style=solid label="SHARED"]
  71 -> 128 [style=solid label="SCHEDULE"]
  71 -> 129 [style=solid label="NUM_THREADS"]
  71 -> 130 [style=solid label="REDUCTION"]
  71 -> 131 [style=dashed label="parallel_stmt_argument_list"]
  71 -> 132 [style=dashed label="parallel_stmt_argument"]
  72 [label="State 72\n\l123 parallel_statement: PARALLEL compound_statement •\l"]
  72 -> "72R123" [style=solid]
 "72R123" [label="R123", fillcolor=3, shape=diamond, style=filled]
  73 [label="State 73\n\l112 function_declaration: FUNC IDENTIFIER • dtype LPAREN parameter_list RPAREN compound_statement\l"]
  73 -> 1 [style=dotted]
  73 -> 9 [style=solid label="INT"]
  73 -> 10 [style=solid label="CHAR"]
  73 -> 11 [style=solid label="LONG"]
  73 -> 12 [style=solid label="BOOL"]
  73 -> 13 [style=solid label="FLOAT"]
  73 -> 14 [style=solid label="STRING"]
  73 -> 59 [style=solid label="STRUCT"]
  73 -> 29 [style=dashed label="generic_dtypes"]
  73 -> 133 [style=dashed label="dtype"]
  73 -> 31 [style=dashed label="array"]
  74 [label="State 74\n\l 12 generic_dtypes: STRUCT IDENTIFIER •\l 46 struct_declaration: STRUCT IDENTIFIER • LBRACE member_data_list RBRACE SEMICOLON\l"]
  74 -> 134 [style=solid label="LBRACE"]
  74 -> "74R12" [style=solid]
 "74R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  75 [label="State 75\n\l108 selection_statement: IF LPAREN • expression RPAREN compound_statement if_chain_statement\l109                    | IF LPAREN • expression RPAREN compound_statement ELSE compound_statement\l"]
  75 -> 2 [style=solid label="MINUS"]
  75 -> 3 [style=solid label="NOT"]
  75 -> 5 [style=solid label="LPAREN"]
  75 -> 19 [style=solid label="TRUE"]
  75 -> 20 [style=solid label="FALSE"]
  75 -> 21 [style=solid label="IDENTIFIER"]
  75 -> 22 [style=solid label="INT_LITERAL"]
  75 -> 23 [style=solid label="FLOAT_LITERAL"]
  75 -> 24 [style=solid label="STRING_LITERAL"]
  75 -> 25 [style=solid label="CHARACTER_LITERAL"]
  75 -> 32 [style=dashed label="array_element"]
  75 -> 135 [style=dashed label="expression"]
  75 -> 38 [style=dashed label="function_call"]
  75 -> 39 [style=dashed label="unary_operator"]
  75 -> 40 [style=dashed label="arithmetic_expression"]
  75 -> 41 [style=dashed label="assignment_expression"]
  75 -> 42 [style=dashed label="unary_expression"]
  75 -> 43 [style=dashed label="comparison_expression"]
  75 -> 44 [style=dashed label="logical_expression"]
  75 -> 51 [style=dashed label="array_literal"]
  75 -> 52 [style=dashed label="literals"]
  75 -> 53 [style=dashed label="value"]
  75 -> 54 [style=dashed label="identifier_chain"]
  76 [label="State 76\n\l100 iterative_statement: FOR LPAREN • expression_statement expression_statement expression RPAREN compound_statement\l"]
  76 -> 2 [style=solid label="MINUS"]
  76 -> 3 [style=solid label="NOT"]
  76 -> 4 [style=solid label="SEMICOLON"]
  76 -> 5 [style=solid label="LPAREN"]
  76 -> 19 [style=solid label="TRUE"]
  76 -> 20 [style=solid label="FALSE"]
  76 -> 21 [style=solid label="IDENTIFIER"]
  76 -> 22 [style=solid label="INT_LITERAL"]
  76 -> 23 [style=solid label="FLOAT_LITERAL"]
  76 -> 24 [style=solid label="STRING_LITERAL"]
  76 -> 25 [style=solid label="CHARACTER_LITERAL"]
  76 -> 32 [style=dashed label="array_element"]
  76 -> 136 [style=dashed label="expression_statement"]
  76 -> 37 [style=dashed label="expression"]
  76 -> 38 [style=dashed label="function_call"]
  76 -> 39 [style=dashed label="unary_operator"]
  76 -> 40 [style=dashed label="arithmetic_expression"]
  76 -> 41 [style=dashed label="assignment_expression"]
  76 -> 42 [style=dashed label="unary_expression"]
  76 -> 43 [style=dashed label="comparison_expression"]
  76 -> 44 [style=dashed label="logical_expression"]
  76 -> 51 [style=dashed label="array_literal"]
  76 -> 52 [style=dashed label="literals"]
  76 -> 53 [style=dashed label="value"]
  76 -> 54 [style=dashed label="identifier_chain"]
  77 [label="State 77\n\l103 iterator: REFERENCE • IDENTIFIER\l"]
  77 -> 137 [style=solid label="IDENTIFIER"]
  78 [label="State 78\n\l102 iterator: IDENTIFIER •\l"]
  78 -> "78R102" [style=solid]
 "78R102" [label="R102", fillcolor=3, shape=diamond, style=filled]
  79 [label="State 79\n\l101 iterative_statement: FOR iterator • IN expression compound_statement\l"]
  79 -> 138 [style=solid label="IN"]
  80 [label="State 80\n\l 60 function_call: IDENTIFIER LPAREN • function_call_tail\l"]
  80 -> 2 [style=solid label="MINUS"]
  80 -> 3 [style=solid label="NOT"]
  80 -> 5 [style=solid label="LPAREN"]
  80 -> 139 [style=solid label="RPAREN"]
  80 -> 140 [style=solid label="LBRACE"]
  80 -> 19 [style=solid label="TRUE"]
  80 -> 20 [style=solid label="FALSE"]
  80 -> 21 [style=solid label="IDENTIFIER"]
  80 -> 22 [style=solid label="INT_LITERAL"]
  80 -> 23 [style=solid label="FLOAT_LITERAL"]
  80 -> 24 [style=solid label="STRING_LITERAL"]
  80 -> 25 [style=solid label="CHARACTER_LITERAL"]
  80 -> 32 [style=dashed label="array_element"]
  80 -> 141 [style=dashed label="expression"]
  80 -> 38 [style=dashed label="function_call"]
  80 -> 142 [style=dashed label="function_call_tail"]
  80 -> 143 [style=dashed label="function_arguments"]
  80 -> 39 [style=dashed label="unary_operator"]
  80 -> 40 [style=dashed label="arithmetic_expression"]
  80 -> 41 [style=dashed label="assignment_expression"]
  80 -> 42 [style=dashed label="unary_expression"]
  80 -> 43 [style=dashed label="comparison_expression"]
  80 -> 44 [style=dashed label="logical_expression"]
  80 -> 144 [style=dashed label="list_initialiser"]
  80 -> 145 [style=dashed label="list_member"]
  80 -> 51 [style=dashed label="array_literal"]
  80 -> 52 [style=dashed label="literals"]
  80 -> 53 [style=dashed label="value"]
  80 -> 54 [style=dashed label="identifier_chain"]
  81 [label="State 81\n\l 19 dims: LBRACKET • expression RBRACKET\l"]
  81 -> 2 [style=solid label="MINUS"]
  81 -> 3 [style=solid label="NOT"]
  81 -> 5 [style=solid label="LPAREN"]
  81 -> 19 [style=solid label="TRUE"]
  81 -> 20 [style=solid label="FALSE"]
  81 -> 21 [style=solid label="IDENTIFIER"]
  81 -> 22 [style=solid label="INT_LITERAL"]
  81 -> 23 [style=solid label="FLOAT_LITERAL"]
  81 -> 24 [style=solid label="STRING_LITERAL"]
  81 -> 25 [style=solid label="CHARACTER_LITERAL"]
  81 -> 32 [style=dashed label="array_element"]
  81 -> 146 [style=dashed label="expression"]
  81 -> 38 [style=dashed label="function_call"]
  81 -> 39 [style=dashed label="unary_operator"]
  81 -> 40 [style=dashed label="arithmetic_expression"]
  81 -> 41 [style=dashed label="assignment_expression"]
  81 -> 42 [style=dashed label="unary_expression"]
  81 -> 43 [style=dashed label="comparison_expression"]
  81 -> 44 [style=dashed label="logical_expression"]
  81 -> 51 [style=dashed label="array_literal"]
  81 -> 52 [style=dashed label="literals"]
  81 -> 53 [style=dashed label="value"]
  81 -> 54 [style=dashed label="identifier_chain"]
  82 [label="State 82\n\l 17 array_element: IDENTIFIER dims •\l 18 dims: dims • LBRACKET expression RBRACKET\l"]
  82 -> 147 [style=solid label="LBRACKET"]
  82 -> "82R17" [style=solid]
 "82R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  83 [label="State 83\n\l  0 $accept: program $end •\l"]
  83 -> "83R0" [style=solid]
 "83R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  84 [label="State 84\n\l  4 one_or_more_statements: one_or_more_statements statement •\l"]
  84 -> "84R4" [style=solid]
 "84R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  85 [label="State 85\n\l 16 array: generic_dtypes dims • initializer_dims\l 18 dims: dims • LBRACKET expression RBRACKET\l"]
  85 -> 148 [style=solid label="LBRACKET"]
  85 -> 149 [style=dashed label="initializer_dims"]
  85 -> "85R21" [style=solid]
 "85R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  86 [label="State 86\n\l 89 declaration: REFERENCE • IDENTIFIER ASSIGN IDENTIFIER\l"]
  86 -> 150 [style=solid label="IDENTIFIER"]
  87 [label="State 87\n\l 90 declaration: IDENTIFIER • value_assign\l"]
  87 -> 151 [style=solid label="ASSIGN"]
  87 -> 152 [style=dashed label="value_assign"]
  87 -> "87R92" [style=solid]
 "87R92" [label="R92", fillcolor=3, shape=diamond, style=filled]
  88 [label="State 88\n\l 86 declaration_statement: dtype declaration_list • SEMICOLON\l 87 declaration_list: declaration_list • COMMA declaration\l"]
  88 -> 153 [style=solid label="SEMICOLON"]
  88 -> 154 [style=solid label="COMMA"]
  89 [label="State 89\n\l 88 declaration_list: declaration •\l"]
  89 -> "89R88" [style=solid]
 "89R88" [label="R88", fillcolor=3, shape=diamond, style=filled]
  90 [label="State 90\n\l 71 assignment_expression: expression ASSIGN • expression\l"]
  90 -> 2 [style=solid label="MINUS"]
  90 -> 3 [style=solid label="NOT"]
  90 -> 5 [style=solid label="LPAREN"]
  90 -> 19 [style=solid label="TRUE"]
  90 -> 20 [style=solid label="FALSE"]
  90 -> 21 [style=solid label="IDENTIFIER"]
  90 -> 22 [style=solid label="INT_LITERAL"]
  90 -> 23 [style=solid label="FLOAT_LITERAL"]
  90 -> 24 [style=solid label="STRING_LITERAL"]
  90 -> 25 [style=solid label="CHARACTER_LITERAL"]
  90 -> 32 [style=dashed label="array_element"]
  90 -> 155 [style=dashed label="expression"]
  90 -> 38 [style=dashed label="function_call"]
  90 -> 39 [style=dashed label="unary_operator"]
  90 -> 40 [style=dashed label="arithmetic_expression"]
  90 -> 41 [style=dashed label="assignment_expression"]
  90 -> 42 [style=dashed label="unary_expression"]
  90 -> 43 [style=dashed label="comparison_expression"]
  90 -> 44 [style=dashed label="logical_expression"]
  90 -> 51 [style=dashed label="array_literal"]
  90 -> 52 [style=dashed label="literals"]
  90 -> 53 [style=dashed label="value"]
  90 -> 54 [style=dashed label="identifier_chain"]
  91 [label="State 91\n\l 66 arithmetic_expression: expression PLUS • expression\l"]
  91 -> 2 [style=solid label="MINUS"]
  91 -> 3 [style=solid label="NOT"]
  91 -> 5 [style=solid label="LPAREN"]
  91 -> 19 [style=solid label="TRUE"]
  91 -> 20 [style=solid label="FALSE"]
  91 -> 21 [style=solid label="IDENTIFIER"]
  91 -> 22 [style=solid label="INT_LITERAL"]
  91 -> 23 [style=solid label="FLOAT_LITERAL"]
  91 -> 24 [style=solid label="STRING_LITERAL"]
  91 -> 25 [style=solid label="CHARACTER_LITERAL"]
  91 -> 32 [style=dashed label="array_element"]
  91 -> 156 [style=dashed label="expression"]
  91 -> 38 [style=dashed label="function_call"]
  91 -> 39 [style=dashed label="unary_operator"]
  91 -> 40 [style=dashed label="arithmetic_expression"]
  91 -> 41 [style=dashed label="assignment_expression"]
  91 -> 42 [style=dashed label="unary_expression"]
  91 -> 43 [style=dashed label="comparison_expression"]
  91 -> 44 [style=dashed label="logical_expression"]
  91 -> 51 [style=dashed label="array_literal"]
  91 -> 52 [style=dashed label="literals"]
  91 -> 53 [style=dashed label="value"]
  91 -> 54 [style=dashed label="identifier_chain"]
  92 [label="State 92\n\l 67 arithmetic_expression: expression MINUS • expression\l"]
  92 -> 2 [style=solid label="MINUS"]
  92 -> 3 [style=solid label="NOT"]
  92 -> 5 [style=solid label="LPAREN"]
  92 -> 19 [style=solid label="TRUE"]
  92 -> 20 [style=solid label="FALSE"]
  92 -> 21 [style=solid label="IDENTIFIER"]
  92 -> 22 [style=solid label="INT_LITERAL"]
  92 -> 23 [style=solid label="FLOAT_LITERAL"]
  92 -> 24 [style=solid label="STRING_LITERAL"]
  92 -> 25 [style=solid label="CHARACTER_LITERAL"]
  92 -> 32 [style=dashed label="array_element"]
  92 -> 157 [style=dashed label="expression"]
  92 -> 38 [style=dashed label="function_call"]
  92 -> 39 [style=dashed label="unary_operator"]
  92 -> 40 [style=dashed label="arithmetic_expression"]
  92 -> 41 [style=dashed label="assignment_expression"]
  92 -> 42 [style=dashed label="unary_expression"]
  92 -> 43 [style=dashed label="comparison_expression"]
  92 -> 44 [style=dashed label="logical_expression"]
  92 -> 51 [style=dashed label="array_literal"]
  92 -> 52 [style=dashed label="literals"]
  92 -> 53 [style=dashed label="value"]
  92 -> 54 [style=dashed label="identifier_chain"]
  93 [label="State 93\n\l 68 arithmetic_expression: expression MUL • expression\l"]
  93 -> 2 [style=solid label="MINUS"]
  93 -> 3 [style=solid label="NOT"]
  93 -> 5 [style=solid label="LPAREN"]
  93 -> 19 [style=solid label="TRUE"]
  93 -> 20 [style=solid label="FALSE"]
  93 -> 21 [style=solid label="IDENTIFIER"]
  93 -> 22 [style=solid label="INT_LITERAL"]
  93 -> 23 [style=solid label="FLOAT_LITERAL"]
  93 -> 24 [style=solid label="STRING_LITERAL"]
  93 -> 25 [style=solid label="CHARACTER_LITERAL"]
  93 -> 32 [style=dashed label="array_element"]
  93 -> 158 [style=dashed label="expression"]
  93 -> 38 [style=dashed label="function_call"]
  93 -> 39 [style=dashed label="unary_operator"]
  93 -> 40 [style=dashed label="arithmetic_expression"]
  93 -> 41 [style=dashed label="assignment_expression"]
  93 -> 42 [style=dashed label="unary_expression"]
  93 -> 43 [style=dashed label="comparison_expression"]
  93 -> 44 [style=dashed label="logical_expression"]
  93 -> 51 [style=dashed label="array_literal"]
  93 -> 52 [style=dashed label="literals"]
  93 -> 53 [style=dashed label="value"]
  93 -> 54 [style=dashed label="identifier_chain"]
  94 [label="State 94\n\l 69 arithmetic_expression: expression DIV • expression\l"]
  94 -> 2 [style=solid label="MINUS"]
  94 -> 3 [style=solid label="NOT"]
  94 -> 5 [style=solid label="LPAREN"]
  94 -> 19 [style=solid label="TRUE"]
  94 -> 20 [style=solid label="FALSE"]
  94 -> 21 [style=solid label="IDENTIFIER"]
  94 -> 22 [style=solid label="INT_LITERAL"]
  94 -> 23 [style=solid label="FLOAT_LITERAL"]
  94 -> 24 [style=solid label="STRING_LITERAL"]
  94 -> 25 [style=solid label="CHARACTER_LITERAL"]
  94 -> 32 [style=dashed label="array_element"]
  94 -> 159 [style=dashed label="expression"]
  94 -> 38 [style=dashed label="function_call"]
  94 -> 39 [style=dashed label="unary_operator"]
  94 -> 40 [style=dashed label="arithmetic_expression"]
  94 -> 41 [style=dashed label="assignment_expression"]
  94 -> 42 [style=dashed label="unary_expression"]
  94 -> 43 [style=dashed label="comparison_expression"]
  94 -> 44 [style=dashed label="logical_expression"]
  94 -> 51 [style=dashed label="array_literal"]
  94 -> 52 [style=dashed label="literals"]
  94 -> 53 [style=dashed label="value"]
  94 -> 54 [style=dashed label="identifier_chain"]
  95 [label="State 95\n\l 70 arithmetic_expression: expression MOD • expression\l"]
  95 -> 2 [style=solid label="MINUS"]
  95 -> 3 [style=solid label="NOT"]
  95 -> 5 [style=solid label="LPAREN"]
  95 -> 19 [style=solid label="TRUE"]
  95 -> 20 [style=solid label="FALSE"]
  95 -> 21 [style=solid label="IDENTIFIER"]
  95 -> 22 [style=solid label="INT_LITERAL"]
  95 -> 23 [style=solid label="FLOAT_LITERAL"]
  95 -> 24 [style=solid label="STRING_LITERAL"]
  95 -> 25 [style=solid label="CHARACTER_LITERAL"]
  95 -> 32 [style=dashed label="array_element"]
  95 -> 160 [style=dashed label="expression"]
  95 -> 38 [style=dashed label="function_call"]
  95 -> 39 [style=dashed label="unary_operator"]
  95 -> 40 [style=dashed label="arithmetic_expression"]
  95 -> 41 [style=dashed label="assignment_expression"]
  95 -> 42 [style=dashed label="unary_expression"]
  95 -> 43 [style=dashed label="comparison_expression"]
  95 -> 44 [style=dashed label="logical_expression"]
  95 -> 51 [style=dashed label="array_literal"]
  95 -> 52 [style=dashed label="literals"]
  95 -> 53 [style=dashed label="value"]
  95 -> 54 [style=dashed label="identifier_chain"]
  96 [label="State 96\n\l 82 comparison_expression: expression EQ • expression\l"]
  96 -> 2 [style=solid label="MINUS"]
  96 -> 3 [style=solid label="NOT"]
  96 -> 5 [style=solid label="LPAREN"]
  96 -> 19 [style=solid label="TRUE"]
  96 -> 20 [style=solid label="FALSE"]
  96 -> 21 [style=solid label="IDENTIFIER"]
  96 -> 22 [style=solid label="INT_LITERAL"]
  96 -> 23 [style=solid label="FLOAT_LITERAL"]
  96 -> 24 [style=solid label="STRING_LITERAL"]
  96 -> 25 [style=solid label="CHARACTER_LITERAL"]
  96 -> 32 [style=dashed label="array_element"]
  96 -> 161 [style=dashed label="expression"]
  96 -> 38 [style=dashed label="function_call"]
  96 -> 39 [style=dashed label="unary_operator"]
  96 -> 40 [style=dashed label="arithmetic_expression"]
  96 -> 41 [style=dashed label="assignment_expression"]
  96 -> 42 [style=dashed label="unary_expression"]
  96 -> 43 [style=dashed label="comparison_expression"]
  96 -> 44 [style=dashed label="logical_expression"]
  96 -> 51 [style=dashed label="array_literal"]
  96 -> 52 [style=dashed label="literals"]
  96 -> 53 [style=dashed label="value"]
  96 -> 54 [style=dashed label="identifier_chain"]
  97 [label="State 97\n\l 83 comparison_expression: expression NEQ • expression\l"]
  97 -> 2 [style=solid label="MINUS"]
  97 -> 3 [style=solid label="NOT"]
  97 -> 5 [style=solid label="LPAREN"]
  97 -> 19 [style=solid label="TRUE"]
  97 -> 20 [style=solid label="FALSE"]
  97 -> 21 [style=solid label="IDENTIFIER"]
  97 -> 22 [style=solid label="INT_LITERAL"]
  97 -> 23 [style=solid label="FLOAT_LITERAL"]
  97 -> 24 [style=solid label="STRING_LITERAL"]
  97 -> 25 [style=solid label="CHARACTER_LITERAL"]
  97 -> 32 [style=dashed label="array_element"]
  97 -> 162 [style=dashed label="expression"]
  97 -> 38 [style=dashed label="function_call"]
  97 -> 39 [style=dashed label="unary_operator"]
  97 -> 40 [style=dashed label="arithmetic_expression"]
  97 -> 41 [style=dashed label="assignment_expression"]
  97 -> 42 [style=dashed label="unary_expression"]
  97 -> 43 [style=dashed label="comparison_expression"]
  97 -> 44 [style=dashed label="logical_expression"]
  97 -> 51 [style=dashed label="array_literal"]
  97 -> 52 [style=dashed label="literals"]
  97 -> 53 [style=dashed label="value"]
  97 -> 54 [style=dashed label="identifier_chain"]
  98 [label="State 98\n\l 79 comparison_expression: expression GT • expression\l"]
  98 -> 2 [style=solid label="MINUS"]
  98 -> 3 [style=solid label="NOT"]
  98 -> 5 [style=solid label="LPAREN"]
  98 -> 19 [style=solid label="TRUE"]
  98 -> 20 [style=solid label="FALSE"]
  98 -> 21 [style=solid label="IDENTIFIER"]
  98 -> 22 [style=solid label="INT_LITERAL"]
  98 -> 23 [style=solid label="FLOAT_LITERAL"]
  98 -> 24 [style=solid label="STRING_LITERAL"]
  98 -> 25 [style=solid label="CHARACTER_LITERAL"]
  98 -> 32 [style=dashed label="array_element"]
  98 -> 163 [style=dashed label="expression"]
  98 -> 38 [style=dashed label="function_call"]
  98 -> 39 [style=dashed label="unary_operator"]
  98 -> 40 [style=dashed label="arithmetic_expression"]
  98 -> 41 [style=dashed label="assignment_expression"]
  98 -> 42 [style=dashed label="unary_expression"]
  98 -> 43 [style=dashed label="comparison_expression"]
  98 -> 44 [style=dashed label="logical_expression"]
  98 -> 51 [style=dashed label="array_literal"]
  98 -> 52 [style=dashed label="literals"]
  98 -> 53 [style=dashed label="value"]
  98 -> 54 [style=dashed label="identifier_chain"]
  99 [label="State 99\n\l 78 comparison_expression: expression LT • expression\l"]
  99 -> 2 [style=solid label="MINUS"]
  99 -> 3 [style=solid label="NOT"]
  99 -> 5 [style=solid label="LPAREN"]
  99 -> 19 [style=solid label="TRUE"]
  99 -> 20 [style=solid label="FALSE"]
  99 -> 21 [style=solid label="IDENTIFIER"]
  99 -> 22 [style=solid label="INT_LITERAL"]
  99 -> 23 [style=solid label="FLOAT_LITERAL"]
  99 -> 24 [style=solid label="STRING_LITERAL"]
  99 -> 25 [style=solid label="CHARACTER_LITERAL"]
  99 -> 32 [style=dashed label="array_element"]
  99 -> 164 [style=dashed label="expression"]
  99 -> 38 [style=dashed label="function_call"]
  99 -> 39 [style=dashed label="unary_operator"]
  99 -> 40 [style=dashed label="arithmetic_expression"]
  99 -> 41 [style=dashed label="assignment_expression"]
  99 -> 42 [style=dashed label="unary_expression"]
  99 -> 43 [style=dashed label="comparison_expression"]
  99 -> 44 [style=dashed label="logical_expression"]
  99 -> 51 [style=dashed label="array_literal"]
  99 -> 52 [style=dashed label="literals"]
  99 -> 53 [style=dashed label="value"]
  99 -> 54 [style=dashed label="identifier_chain"]
  100 [label="State 100\n\l 80 comparison_expression: expression GTE • expression\l"]
  100 -> 2 [style=solid label="MINUS"]
  100 -> 3 [style=solid label="NOT"]
  100 -> 5 [style=solid label="LPAREN"]
  100 -> 19 [style=solid label="TRUE"]
  100 -> 20 [style=solid label="FALSE"]
  100 -> 21 [style=solid label="IDENTIFIER"]
  100 -> 22 [style=solid label="INT_LITERAL"]
  100 -> 23 [style=solid label="FLOAT_LITERAL"]
  100 -> 24 [style=solid label="STRING_LITERAL"]
  100 -> 25 [style=solid label="CHARACTER_LITERAL"]
  100 -> 32 [style=dashed label="array_element"]
  100 -> 165 [style=dashed label="expression"]
  100 -> 38 [style=dashed label="function_call"]
  100 -> 39 [style=dashed label="unary_operator"]
  100 -> 40 [style=dashed label="arithmetic_expression"]
  100 -> 41 [style=dashed label="assignment_expression"]
  100 -> 42 [style=dashed label="unary_expression"]
  100 -> 43 [style=dashed label="comparison_expression"]
  100 -> 44 [style=dashed label="logical_expression"]
  100 -> 51 [style=dashed label="array_literal"]
  100 -> 52 [style=dashed label="literals"]
  100 -> 53 [style=dashed label="value"]
  100 -> 54 [style=dashed label="identifier_chain"]
  101 [label="State 101\n\l 81 comparison_expression: expression LTE • expression\l"]
  101 -> 2 [style=solid label="MINUS"]
  101 -> 3 [style=solid label="NOT"]
  101 -> 5 [style=solid label="LPAREN"]
  101 -> 19 [style=solid label="TRUE"]
  101 -> 20 [style=solid label="FALSE"]
  101 -> 21 [style=solid label="IDENTIFIER"]
  101 -> 22 [style=solid label="INT_LITERAL"]
  101 -> 23 [style=solid label="FLOAT_LITERAL"]
  101 -> 24 [style=solid label="STRING_LITERAL"]
  101 -> 25 [style=solid label="CHARACTER_LITERAL"]
  101 -> 32 [style=dashed label="array_element"]
  101 -> 166 [style=dashed label="expression"]
  101 -> 38 [style=dashed label="function_call"]
  101 -> 39 [style=dashed label="unary_operator"]
  101 -> 40 [style=dashed label="arithmetic_expression"]
  101 -> 41 [style=dashed label="assignment_expression"]
  101 -> 42 [style=dashed label="unary_expression"]
  101 -> 43 [style=dashed label="comparison_expression"]
  101 -> 44 [style=dashed label="logical_expression"]
  101 -> 51 [style=dashed label="array_literal"]
  101 -> 52 [style=dashed label="literals"]
  101 -> 53 [style=dashed label="value"]
  101 -> 54 [style=dashed label="identifier_chain"]
  102 [label="State 102\n\l 84 logical_expression: expression AND • expression\l"]
  102 -> 2 [style=solid label="MINUS"]
  102 -> 3 [style=solid label="NOT"]
  102 -> 5 [style=solid label="LPAREN"]
  102 -> 19 [style=solid label="TRUE"]
  102 -> 20 [style=solid label="FALSE"]
  102 -> 21 [style=solid label="IDENTIFIER"]
  102 -> 22 [style=solid label="INT_LITERAL"]
  102 -> 23 [style=solid label="FLOAT_LITERAL"]
  102 -> 24 [style=solid label="STRING_LITERAL"]
  102 -> 25 [style=solid label="CHARACTER_LITERAL"]
  102 -> 32 [style=dashed label="array_element"]
  102 -> 167 [style=dashed label="expression"]
  102 -> 38 [style=dashed label="function_call"]
  102 -> 39 [style=dashed label="unary_operator"]
  102 -> 40 [style=dashed label="arithmetic_expression"]
  102 -> 41 [style=dashed label="assignment_expression"]
  102 -> 42 [style=dashed label="unary_expression"]
  102 -> 43 [style=dashed label="comparison_expression"]
  102 -> 44 [style=dashed label="logical_expression"]
  102 -> 51 [style=dashed label="array_literal"]
  102 -> 52 [style=dashed label="literals"]
  102 -> 53 [style=dashed label="value"]
  102 -> 54 [style=dashed label="identifier_chain"]
  103 [label="State 103\n\l 85 logical_expression: expression OR • expression\l"]
  103 -> 2 [style=solid label="MINUS"]
  103 -> 3 [style=solid label="NOT"]
  103 -> 5 [style=solid label="LPAREN"]
  103 -> 19 [style=solid label="TRUE"]
  103 -> 20 [style=solid label="FALSE"]
  103 -> 21 [style=solid label="IDENTIFIER"]
  103 -> 22 [style=solid label="INT_LITERAL"]
  103 -> 23 [style=solid label="FLOAT_LITERAL"]
  103 -> 24 [style=solid label="STRING_LITERAL"]
  103 -> 25 [style=solid label="CHARACTER_LITERAL"]
  103 -> 32 [style=dashed label="array_element"]
  103 -> 168 [style=dashed label="expression"]
  103 -> 38 [style=dashed label="function_call"]
  103 -> 39 [style=dashed label="unary_operator"]
  103 -> 40 [style=dashed label="arithmetic_expression"]
  103 -> 41 [style=dashed label="assignment_expression"]
  103 -> 42 [style=dashed label="unary_expression"]
  103 -> 43 [style=dashed label="comparison_expression"]
  103 -> 44 [style=dashed label="logical_expression"]
  103 -> 51 [style=dashed label="array_literal"]
  103 -> 52 [style=dashed label="literals"]
  103 -> 53 [style=dashed label="value"]
  103 -> 54 [style=dashed label="identifier_chain"]
  104 [label="State 104\n\l 72 assignment_expression: expression ADD_ASSIGN • expression\l"]
  104 -> 2 [style=solid label="MINUS"]
  104 -> 3 [style=solid label="NOT"]
  104 -> 5 [style=solid label="LPAREN"]
  104 -> 19 [style=solid label="TRUE"]
  104 -> 20 [style=solid label="FALSE"]
  104 -> 21 [style=solid label="IDENTIFIER"]
  104 -> 22 [style=solid label="INT_LITERAL"]
  104 -> 23 [style=solid label="FLOAT_LITERAL"]
  104 -> 24 [style=solid label="STRING_LITERAL"]
  104 -> 25 [style=solid label="CHARACTER_LITERAL"]
  104 -> 32 [style=dashed label="array_element"]
  104 -> 169 [style=dashed label="expression"]
  104 -> 38 [style=dashed label="function_call"]
  104 -> 39 [style=dashed label="unary_operator"]
  104 -> 40 [style=dashed label="arithmetic_expression"]
  104 -> 41 [style=dashed label="assignment_expression"]
  104 -> 42 [style=dashed label="unary_expression"]
  104 -> 43 [style=dashed label="comparison_expression"]
  104 -> 44 [style=dashed label="logical_expression"]
  104 -> 51 [style=dashed label="array_literal"]
  104 -> 52 [style=dashed label="literals"]
  104 -> 53 [style=dashed label="value"]
  104 -> 54 [style=dashed label="identifier_chain"]
  105 [label="State 105\n\l 73 assignment_expression: expression SUB_ASSIGN • expression\l"]
  105 -> 2 [style=solid label="MINUS"]
  105 -> 3 [style=solid label="NOT"]
  105 -> 5 [style=solid label="LPAREN"]
  105 -> 19 [style=solid label="TRUE"]
  105 -> 20 [style=solid label="FALSE"]
  105 -> 21 [style=solid label="IDENTIFIER"]
  105 -> 22 [style=solid label="INT_LITERAL"]
  105 -> 23 [style=solid label="FLOAT_LITERAL"]
  105 -> 24 [style=solid label="STRING_LITERAL"]
  105 -> 25 [style=solid label="CHARACTER_LITERAL"]
  105 -> 32 [style=dashed label="array_element"]
  105 -> 170 [style=dashed label="expression"]
  105 -> 38 [style=dashed label="function_call"]
  105 -> 39 [style=dashed label="unary_operator"]
  105 -> 40 [style=dashed label="arithmetic_expression"]
  105 -> 41 [style=dashed label="assignment_expression"]
  105 -> 42 [style=dashed label="unary_expression"]
  105 -> 43 [style=dashed label="comparison_expression"]
  105 -> 44 [style=dashed label="logical_expression"]
  105 -> 51 [style=dashed label="array_literal"]
  105 -> 52 [style=dashed label="literals"]
  105 -> 53 [style=dashed label="value"]
  105 -> 54 [style=dashed label="identifier_chain"]
  106 [label="State 106\n\l 74 assignment_expression: expression MUL_ASSIGN • expression\l"]
  106 -> 2 [style=solid label="MINUS"]
  106 -> 3 [style=solid label="NOT"]
  106 -> 5 [style=solid label="LPAREN"]
  106 -> 19 [style=solid label="TRUE"]
  106 -> 20 [style=solid label="FALSE"]
  106 -> 21 [style=solid label="IDENTIFIER"]
  106 -> 22 [style=solid label="INT_LITERAL"]
  106 -> 23 [style=solid label="FLOAT_LITERAL"]
  106 -> 24 [style=solid label="STRING_LITERAL"]
  106 -> 25 [style=solid label="CHARACTER_LITERAL"]
  106 -> 32 [style=dashed label="array_element"]
  106 -> 171 [style=dashed label="expression"]
  106 -> 38 [style=dashed label="function_call"]
  106 -> 39 [style=dashed label="unary_operator"]
  106 -> 40 [style=dashed label="arithmetic_expression"]
  106 -> 41 [style=dashed label="assignment_expression"]
  106 -> 42 [style=dashed label="unary_expression"]
  106 -> 43 [style=dashed label="comparison_expression"]
  106 -> 44 [style=dashed label="logical_expression"]
  106 -> 51 [style=dashed label="array_literal"]
  106 -> 52 [style=dashed label="literals"]
  106 -> 53 [style=dashed label="value"]
  106 -> 54 [style=dashed label="identifier_chain"]
  107 [label="State 107\n\l 75 assignment_expression: expression DIV_ASSIGN • expression\l"]
  107 -> 2 [style=solid label="MINUS"]
  107 -> 3 [style=solid label="NOT"]
  107 -> 5 [style=solid label="LPAREN"]
  107 -> 19 [style=solid label="TRUE"]
  107 -> 20 [style=solid label="FALSE"]
  107 -> 21 [style=solid label="IDENTIFIER"]
  107 -> 22 [style=solid label="INT_LITERAL"]
  107 -> 23 [style=solid label="FLOAT_LITERAL"]
  107 -> 24 [style=solid label="STRING_LITERAL"]
  107 -> 25 [style=solid label="CHARACTER_LITERAL"]
  107 -> 32 [style=dashed label="array_element"]
  107 -> 172 [style=dashed label="expression"]
  107 -> 38 [style=dashed label="function_call"]
  107 -> 39 [style=dashed label="unary_operator"]
  107 -> 40 [style=dashed label="arithmetic_expression"]
  107 -> 41 [style=dashed label="assignment_expression"]
  107 -> 42 [style=dashed label="unary_expression"]
  107 -> 43 [style=dashed label="comparison_expression"]
  107 -> 44 [style=dashed label="logical_expression"]
  107 -> 51 [style=dashed label="array_literal"]
  107 -> 52 [style=dashed label="literals"]
  107 -> 53 [style=dashed label="value"]
  107 -> 54 [style=dashed label="identifier_chain"]
  108 [label="State 108\n\l 76 assignment_expression: expression MOD_ASSIGN • expression\l"]
  108 -> 2 [style=solid label="MINUS"]
  108 -> 3 [style=solid label="NOT"]
  108 -> 5 [style=solid label="LPAREN"]
  108 -> 19 [style=solid label="TRUE"]
  108 -> 20 [style=solid label="FALSE"]
  108 -> 21 [style=solid label="IDENTIFIER"]
  108 -> 22 [style=solid label="INT_LITERAL"]
  108 -> 23 [style=solid label="FLOAT_LITERAL"]
  108 -> 24 [style=solid label="STRING_LITERAL"]
  108 -> 25 [style=solid label="CHARACTER_LITERAL"]
  108 -> 32 [style=dashed label="array_element"]
  108 -> 173 [style=dashed label="expression"]
  108 -> 38 [style=dashed label="function_call"]
  108 -> 39 [style=dashed label="unary_operator"]
  108 -> 40 [style=dashed label="arithmetic_expression"]
  108 -> 41 [style=dashed label="assignment_expression"]
  108 -> 42 [style=dashed label="unary_expression"]
  108 -> 43 [style=dashed label="comparison_expression"]
  108 -> 44 [style=dashed label="logical_expression"]
  108 -> 51 [style=dashed label="array_literal"]
  108 -> 52 [style=dashed label="literals"]
  108 -> 53 [style=dashed label="value"]
  108 -> 54 [style=dashed label="identifier_chain"]
  109 [label="State 109\n\l 50 expression_statement: expression SEMICOLON •\l"]
  109 -> "109R50" [style=solid]
 "109R50" [label="R50", fillcolor=3, shape=diamond, style=filled]
  110 [label="State 110\n\l104 range: RANGE •\l"]
  110 -> "110R104" [style=solid]
 "110R104" [label="R104", fillcolor=3, shape=diamond, style=filled]
  111 [label="State 111\n\l105 range: RANGE_INCL •\l"]
  111 -> "111R105" [style=solid]
 "111R105" [label="R105", fillcolor=3, shape=diamond, style=filled]
  112 [label="State 112\n\l217 array_literal: expression range • expression\l"]
  112 -> 2 [style=solid label="MINUS"]
  112 -> 3 [style=solid label="NOT"]
  112 -> 5 [style=solid label="LPAREN"]
  112 -> 19 [style=solid label="TRUE"]
  112 -> 20 [style=solid label="FALSE"]
  112 -> 21 [style=solid label="IDENTIFIER"]
  112 -> 22 [style=solid label="INT_LITERAL"]
  112 -> 23 [style=solid label="FLOAT_LITERAL"]
  112 -> 24 [style=solid label="STRING_LITERAL"]
  112 -> 25 [style=solid label="CHARACTER_LITERAL"]
  112 -> 32 [style=dashed label="array_element"]
  112 -> 174 [style=dashed label="expression"]
  112 -> 38 [style=dashed label="function_call"]
  112 -> 39 [style=dashed label="unary_operator"]
  112 -> 40 [style=dashed label="arithmetic_expression"]
  112 -> 41 [style=dashed label="assignment_expression"]
  112 -> 42 [style=dashed label="unary_expression"]
  112 -> 43 [style=dashed label="comparison_expression"]
  112 -> 44 [style=dashed label="logical_expression"]
  112 -> 51 [style=dashed label="array_literal"]
  112 -> 52 [style=dashed label="literals"]
  112 -> 53 [style=dashed label="value"]
  112 -> 54 [style=dashed label="identifier_chain"]
  113 [label="State 113\n\l107 number: IDENTIFIER •\l"]
  113 -> "113R107" [style=solid]
 "113R107" [label="R107", fillcolor=3, shape=diamond, style=filled]
  114 [label="State 114\n\l106 number: INT_LITERAL •\l"]
  114 -> "114R106" [style=solid]
 "114R106" [label="R106", fillcolor=3, shape=diamond, style=filled]
  115 [label="State 115\n\l 77 unary_expression: unary_operator number •\l"]
  115 -> "115R77" [style=solid]
 "115R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
  116 [label="State 116\n\l228 identifier_chain: identifier_chain DOT • IDENTIFIER\l"]
  116 -> 175 [style=solid label="IDENTIFIER"]
  117 [label="State 117\n\l 53 expression: LPAREN expression RPAREN •\l"]
  117 -> "117R53" [style=solid]
 "117R53" [label="R53", fillcolor=3, shape=diamond, style=filled]
  118 [label="State 118\n\l 42 return_statement: RETURN expression • SEMICOLON\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  118 -> 90 [style=solid label="ASSIGN"]
  118 -> 91 [style=solid label="PLUS"]
  118 -> 92 [style=solid label="MINUS"]
  118 -> 93 [style=solid label="MUL"]
  118 -> 94 [style=solid label="DIV"]
  118 -> 95 [style=solid label="MOD"]
  118 -> 96 [style=solid label="EQ"]
  118 -> 97 [style=solid label="NEQ"]
  118 -> 98 [style=solid label="GT"]
  118 -> 99 [style=solid label="LT"]
  118 -> 100 [style=solid label="GTE"]
  118 -> 101 [style=solid label="LTE"]
  118 -> 102 [style=solid label="AND"]
  118 -> 103 [style=solid label="OR"]
  118 -> 104 [style=solid label="ADD_ASSIGN"]
  118 -> 105 [style=solid label="SUB_ASSIGN"]
  118 -> 106 [style=solid label="MUL_ASSIGN"]
  118 -> 107 [style=solid label="DIV_ASSIGN"]
  118 -> 108 [style=solid label="MOD_ASSIGN"]
  118 -> 176 [style=solid label="SEMICOLON"]
  118 -> 110 [style=solid label="RANGE"]
  118 -> 111 [style=solid label="RANGE_INCL"]
  118 -> 112 [style=dashed label="range"]
  119 [label="State 119\n\l 44 return_statement: CONTINUE SEMICOLON •\l"]
  119 -> "119R44" [style=solid]
 "119R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
  120 [label="State 120\n\l 43 return_statement: BREAK SEMICOLON •\l"]
  120 -> "120R43" [style=solid]
 "120R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
  121 [label="State 121\n\l 12 generic_dtypes: STRUCT IDENTIFIER •\l"]
  121 -> "121R12" [style=solid]
 "121R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  122 [label="State 122\n\l 45 compound_statement: LBRACE inner_statement RBRACE •\l"]
  122 -> "122R45" [style=solid]
 "122R45" [label="R45", fillcolor=3, shape=diamond, style=filled]
  123 [label="State 123\n\l 33 one_or_more_inner_statements: one_or_more_inner_statements inner_statement_list •\l"]
  123 -> "123R33" [style=solid]
 "123R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  124 [label="State 124\n\l149 taskgroup_statement: TASKGROUP IDENTIFIER LPAREN • taskgroup_argument_list RPAREN LBRACE taskgroup_definition RBRACE SEMICOLON\l"]
  124 -> 177 [style=solid label="LOG"]
  124 -> 178 [style=solid label="NUM_THREADS"]
  124 -> 179 [style=dashed label="taskgroup_argument_list"]
  124 -> 180 [style=dashed label="taskgroup_argument"]
  125 [label="State 125\n\l150 taskgroup_statement: TASKGROUP IDENTIFIER LBRACE • taskgroup_definition RBRACE SEMICOLON\l"]
  125 -> 181 [style=solid label="TASK"]
  125 -> 182 [style=solid label="SUPERVISOR"]
  125 -> 183 [style=dashed label="taskgroup_definition"]
  125 -> 184 [style=dashed label="task_declaration_list"]
  125 -> 185 [style=dashed label="task_declaration"]
  125 -> "125R156" [style=solid]
 "125R156" [label="R156", fillcolor=3, shape=diamond, style=filled]
  126 [label="State 126\n\l128 parallel_stmt_argument: PRIVATE • ASSIGN LBRACKET identifier_list RBRACKET\l"]
  126 -> 186 [style=solid label="ASSIGN"]
  127 [label="State 127\n\l127 parallel_stmt_argument: SHARED • ASSIGN LBRACKET identifier_list RBRACKET\l"]
  127 -> 187 [style=solid label="ASSIGN"]
  128 [label="State 128\n\l130 parallel_stmt_argument: SCHEDULE • ASSIGN schedule_list\l"]
  128 -> 188 [style=solid label="ASSIGN"]
  129 [label="State 129\n\l131 parallel_stmt_argument: NUM_THREADS • ASSIGN INT_LITERAL\l"]
  129 -> 189 [style=solid label="ASSIGN"]
  130 [label="State 130\n\l129 parallel_stmt_argument: REDUCTION • ASSIGN LBRACKET reduction_list RBRACKET\l"]
  130 -> 190 [style=solid label="ASSIGN"]
  131 [label="State 131\n\l122 parallel_statement: PARALLEL LPAREN parallel_stmt_argument_list • RPAREN compound_statement\l124                   | PARALLEL LPAREN parallel_stmt_argument_list • RPAREN iterative_statement\l125 parallel_stmt_argument_list: parallel_stmt_argument_list • COMMA parallel_stmt_argument\l"]
  131 -> 191 [style=solid label="RPAREN"]
  131 -> 192 [style=solid label="COMMA"]
  132 [label="State 132\n\l126 parallel_stmt_argument_list: parallel_stmt_argument •\l"]
  132 -> "132R126" [style=solid]
 "132R126" [label="R126", fillcolor=3, shape=diamond, style=filled]
  133 [label="State 133\n\l112 function_declaration: FUNC IDENTIFIER dtype • LPAREN parameter_list RPAREN compound_statement\l"]
  133 -> 193 [style=solid label="LPAREN"]
  134 [label="State 134\n\l 46 struct_declaration: STRUCT IDENTIFIER LBRACE • member_data_list RBRACE SEMICOLON\l"]
  134 -> 194 [style=dashed label="member_data_list"]
  134 -> "134R48" [style=solid]
 "134R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
  135 [label="State 135\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l108 selection_statement: IF LPAREN expression • RPAREN compound_statement if_chain_statement\l109                    | IF LPAREN expression • RPAREN compound_statement ELSE compound_statement\l217 array_literal: expression • range expression\l"]
  135 -> 90 [style=solid label="ASSIGN"]
  135 -> 91 [style=solid label="PLUS"]
  135 -> 92 [style=solid label="MINUS"]
  135 -> 93 [style=solid label="MUL"]
  135 -> 94 [style=solid label="DIV"]
  135 -> 95 [style=solid label="MOD"]
  135 -> 96 [style=solid label="EQ"]
  135 -> 97 [style=solid label="NEQ"]
  135 -> 98 [style=solid label="GT"]
  135 -> 99 [style=solid label="LT"]
  135 -> 100 [style=solid label="GTE"]
  135 -> 101 [style=solid label="LTE"]
  135 -> 102 [style=solid label="AND"]
  135 -> 103 [style=solid label="OR"]
  135 -> 104 [style=solid label="ADD_ASSIGN"]
  135 -> 105 [style=solid label="SUB_ASSIGN"]
  135 -> 106 [style=solid label="MUL_ASSIGN"]
  135 -> 107 [style=solid label="DIV_ASSIGN"]
  135 -> 108 [style=solid label="MOD_ASSIGN"]
  135 -> 195 [style=solid label="RPAREN"]
  135 -> 110 [style=solid label="RANGE"]
  135 -> 111 [style=solid label="RANGE_INCL"]
  135 -> 112 [style=dashed label="range"]
  136 [label="State 136\n\l100 iterative_statement: FOR LPAREN expression_statement • expression_statement expression RPAREN compound_statement\l"]
  136 -> 2 [style=solid label="MINUS"]
  136 -> 3 [style=solid label="NOT"]
  136 -> 4 [style=solid label="SEMICOLON"]
  136 -> 5 [style=solid label="LPAREN"]
  136 -> 19 [style=solid label="TRUE"]
  136 -> 20 [style=solid label="FALSE"]
  136 -> 21 [style=solid label="IDENTIFIER"]
  136 -> 22 [style=solid label="INT_LITERAL"]
  136 -> 23 [style=solid label="FLOAT_LITERAL"]
  136 -> 24 [style=solid label="STRING_LITERAL"]
  136 -> 25 [style=solid label="CHARACTER_LITERAL"]
  136 -> 32 [style=dashed label="array_element"]
  136 -> 196 [style=dashed label="expression_statement"]
  136 -> 37 [style=dashed label="expression"]
  136 -> 38 [style=dashed label="function_call"]
  136 -> 39 [style=dashed label="unary_operator"]
  136 -> 40 [style=dashed label="arithmetic_expression"]
  136 -> 41 [style=dashed label="assignment_expression"]
  136 -> 42 [style=dashed label="unary_expression"]
  136 -> 43 [style=dashed label="comparison_expression"]
  136 -> 44 [style=dashed label="logical_expression"]
  136 -> 51 [style=dashed label="array_literal"]
  136 -> 52 [style=dashed label="literals"]
  136 -> 53 [style=dashed label="value"]
  136 -> 54 [style=dashed label="identifier_chain"]
  137 [label="State 137\n\l103 iterator: REFERENCE IDENTIFIER •\l"]
  137 -> "137R103" [style=solid]
 "137R103" [label="R103", fillcolor=3, shape=diamond, style=filled]
  138 [label="State 138\n\l101 iterative_statement: FOR iterator IN • expression compound_statement\l"]
  138 -> 2 [style=solid label="MINUS"]
  138 -> 3 [style=solid label="NOT"]
  138 -> 5 [style=solid label="LPAREN"]
  138 -> 19 [style=solid label="TRUE"]
  138 -> 20 [style=solid label="FALSE"]
  138 -> 21 [style=solid label="IDENTIFIER"]
  138 -> 22 [style=solid label="INT_LITERAL"]
  138 -> 23 [style=solid label="FLOAT_LITERAL"]
  138 -> 24 [style=solid label="STRING_LITERAL"]
  138 -> 25 [style=solid label="CHARACTER_LITERAL"]
  138 -> 32 [style=dashed label="array_element"]
  138 -> 197 [style=dashed label="expression"]
  138 -> 38 [style=dashed label="function_call"]
  138 -> 39 [style=dashed label="unary_operator"]
  138 -> 40 [style=dashed label="arithmetic_expression"]
  138 -> 41 [style=dashed label="assignment_expression"]
  138 -> 42 [style=dashed label="unary_expression"]
  138 -> 43 [style=dashed label="comparison_expression"]
  138 -> 44 [style=dashed label="logical_expression"]
  138 -> 51 [style=dashed label="array_literal"]
  138 -> 52 [style=dashed label="literals"]
  138 -> 53 [style=dashed label="value"]
  138 -> 54 [style=dashed label="identifier_chain"]
  139 [label="State 139\n\l 61 function_call_tail: RPAREN •\l"]
  139 -> "139R61" [style=solid]
 "139R61" [label="R61", fillcolor=3, shape=diamond, style=filled]
  140 [label="State 140\n\l 95 list_initialiser: LBRACE • list_member initialiser_member_list_tail RBRACE\l"]
  140 -> 2 [style=solid label="MINUS"]
  140 -> 3 [style=solid label="NOT"]
  140 -> 5 [style=solid label="LPAREN"]
  140 -> 140 [style=solid label="LBRACE"]
  140 -> 19 [style=solid label="TRUE"]
  140 -> 20 [style=solid label="FALSE"]
  140 -> 21 [style=solid label="IDENTIFIER"]
  140 -> 22 [style=solid label="INT_LITERAL"]
  140 -> 23 [style=solid label="FLOAT_LITERAL"]
  140 -> 24 [style=solid label="STRING_LITERAL"]
  140 -> 25 [style=solid label="CHARACTER_LITERAL"]
  140 -> 32 [style=dashed label="array_element"]
  140 -> 141 [style=dashed label="expression"]
  140 -> 38 [style=dashed label="function_call"]
  140 -> 39 [style=dashed label="unary_operator"]
  140 -> 40 [style=dashed label="arithmetic_expression"]
  140 -> 41 [style=dashed label="assignment_expression"]
  140 -> 42 [style=dashed label="unary_expression"]
  140 -> 43 [style=dashed label="comparison_expression"]
  140 -> 44 [style=dashed label="logical_expression"]
  140 -> 144 [style=dashed label="list_initialiser"]
  140 -> 198 [style=dashed label="list_member"]
  140 -> 51 [style=dashed label="array_literal"]
  140 -> 52 [style=dashed label="literals"]
  140 -> 53 [style=dashed label="value"]
  140 -> 54 [style=dashed label="identifier_chain"]
  141 [label="State 141\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l 99 list_member: expression •\l217 array_literal: expression • range expression\l"]
  141 -> 90 [style=solid label="ASSIGN"]
  141 -> 91 [style=solid label="PLUS"]
  141 -> 92 [style=solid label="MINUS"]
  141 -> 93 [style=solid label="MUL"]
  141 -> 94 [style=solid label="DIV"]
  141 -> 95 [style=solid label="MOD"]
  141 -> 96 [style=solid label="EQ"]
  141 -> 97 [style=solid label="NEQ"]
  141 -> 98 [style=solid label="GT"]
  141 -> 99 [style=solid label="LT"]
  141 -> 100 [style=solid label="GTE"]
  141 -> 101 [style=solid label="LTE"]
  141 -> 102 [style=solid label="AND"]
  141 -> 103 [style=solid label="OR"]
  141 -> 104 [style=solid label="ADD_ASSIGN"]
  141 -> 105 [style=solid label="SUB_ASSIGN"]
  141 -> 106 [style=solid label="MUL_ASSIGN"]
  141 -> 107 [style=solid label="DIV_ASSIGN"]
  141 -> 108 [style=solid label="MOD_ASSIGN"]
  141 -> 110 [style=solid label="RANGE"]
  141 -> 111 [style=solid label="RANGE_INCL"]
  141 -> 112 [style=dashed label="range"]
  141 -> "141R99" [style=solid]
 "141R99" [label="R99", fillcolor=3, shape=diamond, style=filled]
  142 [label="State 142\n\l 60 function_call: IDENTIFIER LPAREN function_call_tail •\l"]
  142 -> "142R60" [style=solid]
 "142R60" [label="R60", fillcolor=3, shape=diamond, style=filled]
  143 [label="State 143\n\l 62 function_call_tail: function_arguments • RPAREN\l"]
  143 -> 199 [style=solid label="RPAREN"]
  144 [label="State 144\n\l 98 list_member: list_initialiser •\l"]
  144 -> "144R98" [style=solid]
 "144R98" [label="R98", fillcolor=3, shape=diamond, style=filled]
  145 [label="State 145\n\l 63 function_arguments: list_member • initialiser_member_list_tail\l"]
  145 -> 200 [style=solid label="COMMA"]
  145 -> 201 [style=dashed label="initialiser_member_list_tail"]
  145 -> "145R97" [style=solid]
 "145R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
  146 [label="State 146\n\l 19 dims: LBRACKET expression • RBRACKET\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  146 -> 90 [style=solid label="ASSIGN"]
  146 -> 91 [style=solid label="PLUS"]
  146 -> 92 [style=solid label="MINUS"]
  146 -> 93 [style=solid label="MUL"]
  146 -> 94 [style=solid label="DIV"]
  146 -> 95 [style=solid label="MOD"]
  146 -> 96 [style=solid label="EQ"]
  146 -> 97 [style=solid label="NEQ"]
  146 -> 98 [style=solid label="GT"]
  146 -> 99 [style=solid label="LT"]
  146 -> 100 [style=solid label="GTE"]
  146 -> 101 [style=solid label="LTE"]
  146 -> 102 [style=solid label="AND"]
  146 -> 103 [style=solid label="OR"]
  146 -> 104 [style=solid label="ADD_ASSIGN"]
  146 -> 105 [style=solid label="SUB_ASSIGN"]
  146 -> 106 [style=solid label="MUL_ASSIGN"]
  146 -> 107 [style=solid label="DIV_ASSIGN"]
  146 -> 108 [style=solid label="MOD_ASSIGN"]
  146 -> 202 [style=solid label="RBRACKET"]
  146 -> 110 [style=solid label="RANGE"]
  146 -> 111 [style=solid label="RANGE_INCL"]
  146 -> 112 [style=dashed label="range"]
  147 [label="State 147\n\l 18 dims: dims LBRACKET • expression RBRACKET\l"]
  147 -> 2 [style=solid label="MINUS"]
  147 -> 3 [style=solid label="NOT"]
  147 -> 5 [style=solid label="LPAREN"]
  147 -> 19 [style=solid label="TRUE"]
  147 -> 20 [style=solid label="FALSE"]
  147 -> 21 [style=solid label="IDENTIFIER"]
  147 -> 22 [style=solid label="INT_LITERAL"]
  147 -> 23 [style=solid label="FLOAT_LITERAL"]
  147 -> 24 [style=solid label="STRING_LITERAL"]
  147 -> 25 [style=solid label="CHARACTER_LITERAL"]
  147 -> 32 [style=dashed label="array_element"]
  147 -> 203 [style=dashed label="expression"]
  147 -> 38 [style=dashed label="function_call"]
  147 -> 39 [style=dashed label="unary_operator"]
  147 -> 40 [style=dashed label="arithmetic_expression"]
  147 -> 41 [style=dashed label="assignment_expression"]
  147 -> 42 [style=dashed label="unary_expression"]
  147 -> 43 [style=dashed label="comparison_expression"]
  147 -> 44 [style=dashed label="logical_expression"]
  147 -> 51 [style=dashed label="array_literal"]
  147 -> 52 [style=dashed label="literals"]
  147 -> 53 [style=dashed label="value"]
  147 -> 54 [style=dashed label="identifier_chain"]
  148 [label="State 148\n\l 18 dims: dims LBRACKET • expression RBRACKET\l 20 initializer_dims: LBRACKET • expression COMMA expression RBRACKET\l"]
  148 -> 2 [style=solid label="MINUS"]
  148 -> 3 [style=solid label="NOT"]
  148 -> 5 [style=solid label="LPAREN"]
  148 -> 19 [style=solid label="TRUE"]
  148 -> 20 [style=solid label="FALSE"]
  148 -> 21 [style=solid label="IDENTIFIER"]
  148 -> 22 [style=solid label="INT_LITERAL"]
  148 -> 23 [style=solid label="FLOAT_LITERAL"]
  148 -> 24 [style=solid label="STRING_LITERAL"]
  148 -> 25 [style=solid label="CHARACTER_LITERAL"]
  148 -> 32 [style=dashed label="array_element"]
  148 -> 204 [style=dashed label="expression"]
  148 -> 38 [style=dashed label="function_call"]
  148 -> 39 [style=dashed label="unary_operator"]
  148 -> 40 [style=dashed label="arithmetic_expression"]
  148 -> 41 [style=dashed label="assignment_expression"]
  148 -> 42 [style=dashed label="unary_expression"]
  148 -> 43 [style=dashed label="comparison_expression"]
  148 -> 44 [style=dashed label="logical_expression"]
  148 -> 51 [style=dashed label="array_literal"]
  148 -> 52 [style=dashed label="literals"]
  148 -> 53 [style=dashed label="value"]
  148 -> 54 [style=dashed label="identifier_chain"]
  149 [label="State 149\n\l 16 array: generic_dtypes dims initializer_dims •\l"]
  149 -> "149R16" [style=solid]
 "149R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
  150 [label="State 150\n\l 89 declaration: REFERENCE IDENTIFIER • ASSIGN IDENTIFIER\l"]
  150 -> 205 [style=solid label="ASSIGN"]
  151 [label="State 151\n\l 91 value_assign: ASSIGN • initializer\l"]
  151 -> 2 [style=solid label="MINUS"]
  151 -> 3 [style=solid label="NOT"]
  151 -> 5 [style=solid label="LPAREN"]
  151 -> 140 [style=solid label="LBRACE"]
  151 -> 19 [style=solid label="TRUE"]
  151 -> 20 [style=solid label="FALSE"]
  151 -> 21 [style=solid label="IDENTIFIER"]
  151 -> 22 [style=solid label="INT_LITERAL"]
  151 -> 23 [style=solid label="FLOAT_LITERAL"]
  151 -> 24 [style=solid label="STRING_LITERAL"]
  151 -> 25 [style=solid label="CHARACTER_LITERAL"]
  151 -> 32 [style=dashed label="array_element"]
  151 -> 206 [style=dashed label="expression"]
  151 -> 38 [style=dashed label="function_call"]
  151 -> 39 [style=dashed label="unary_operator"]
  151 -> 40 [style=dashed label="arithmetic_expression"]
  151 -> 41 [style=dashed label="assignment_expression"]
  151 -> 42 [style=dashed label="unary_expression"]
  151 -> 43 [style=dashed label="comparison_expression"]
  151 -> 44 [style=dashed label="logical_expression"]
  151 -> 207 [style=dashed label="initializer"]
  151 -> 208 [style=dashed label="list_initialiser"]
  151 -> 51 [style=dashed label="array_literal"]
  151 -> 52 [style=dashed label="literals"]
  151 -> 53 [style=dashed label="value"]
  151 -> 54 [style=dashed label="identifier_chain"]
  152 [label="State 152\n\l 90 declaration: IDENTIFIER value_assign •\l"]
  152 -> "152R90" [style=solid]
 "152R90" [label="R90", fillcolor=3, shape=diamond, style=filled]
  153 [label="State 153\n\l 86 declaration_statement: dtype declaration_list SEMICOLON •\l"]
  153 -> "153R86" [style=solid]
 "153R86" [label="R86", fillcolor=3, shape=diamond, style=filled]
  154 [label="State 154\n\l 87 declaration_list: declaration_list COMMA • declaration\l"]
  154 -> 86 [style=solid label="REFERENCE"]
  154 -> 87 [style=solid label="IDENTIFIER"]
  154 -> 209 [style=dashed label="declaration"]
  155 [label="State 155\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 71                      | expression ASSIGN expression •\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  155 -> 90 [style=solid label="ASSIGN"]
  155 -> 91 [style=solid label="PLUS"]
  155 -> 92 [style=solid label="MINUS"]
  155 -> 93 [style=solid label="MUL"]
  155 -> 94 [style=solid label="DIV"]
  155 -> 95 [style=solid label="MOD"]
  155 -> 96 [style=solid label="EQ"]
  155 -> 97 [style=solid label="NEQ"]
  155 -> 98 [style=solid label="GT"]
  155 -> 99 [style=solid label="LT"]
  155 -> 100 [style=solid label="GTE"]
  155 -> 101 [style=solid label="LTE"]
  155 -> 102 [style=solid label="AND"]
  155 -> 103 [style=solid label="OR"]
  155 -> 104 [style=solid label="ADD_ASSIGN"]
  155 -> 105 [style=solid label="SUB_ASSIGN"]
  155 -> 106 [style=solid label="MUL_ASSIGN"]
  155 -> 107 [style=solid label="DIV_ASSIGN"]
  155 -> 108 [style=solid label="MOD_ASSIGN"]
  155 -> 110 [style=solid label="RANGE"]
  155 -> 111 [style=solid label="RANGE_INCL"]
  155 -> 112 [style=dashed label="range"]
  155 -> "155R71d" [label="[RANGE, RANGE_INCL]", style=solid]
 "155R71d" [label="R71", fillcolor=5, shape=diamond, style=filled]
  155 -> "155R71" [style=solid]
 "155R71" [label="R71", fillcolor=3, shape=diamond, style=filled]
  156 [label="State 156\n\l 66 arithmetic_expression: expression • PLUS expression\l 66                      | expression PLUS expression •\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  156 -> 93 [style=solid label="MUL"]
  156 -> 94 [style=solid label="DIV"]
  156 -> 95 [style=solid label="MOD"]
  156 -> 110 [style=solid label="RANGE"]
  156 -> 111 [style=solid label="RANGE_INCL"]
  156 -> 112 [style=dashed label="range"]
  156 -> "156R66d" [label="[RANGE, RANGE_INCL]", style=solid]
 "156R66d" [label="R66", fillcolor=5, shape=diamond, style=filled]
  156 -> "156R66" [style=solid]
 "156R66" [label="R66", fillcolor=3, shape=diamond, style=filled]
  157 [label="State 157\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 67                      | expression MINUS expression •\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  157 -> 93 [style=solid label="MUL"]
  157 -> 94 [style=solid label="DIV"]
  157 -> 95 [style=solid label="MOD"]
  157 -> 110 [style=solid label="RANGE"]
  157 -> 111 [style=solid label="RANGE_INCL"]
  157 -> 112 [style=dashed label="range"]
  157 -> "157R67d" [label="[RANGE, RANGE_INCL]", style=solid]
 "157R67d" [label="R67", fillcolor=5, shape=diamond, style=filled]
  157 -> "157R67" [style=solid]
 "157R67" [label="R67", fillcolor=3, shape=diamond, style=filled]
  158 [label="State 158\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 68                      | expression MUL expression •\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  158 -> 110 [style=solid label="RANGE"]
  158 -> 111 [style=solid label="RANGE_INCL"]
  158 -> 112 [style=dashed label="range"]
  158 -> "158R68d" [label="[RANGE, RANGE_INCL]", style=solid]
 "158R68d" [label="R68", fillcolor=5, shape=diamond, style=filled]
  158 -> "158R68" [style=solid]
 "158R68" [label="R68", fillcolor=3, shape=diamond, style=filled]
  159 [label="State 159\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 69                      | expression DIV expression •\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  159 -> 110 [style=solid label="RANGE"]
  159 -> 111 [style=solid label="RANGE_INCL"]
  159 -> 112 [style=dashed label="range"]
  159 -> "159R69d" [label="[RANGE, RANGE_INCL]", style=solid]
 "159R69d" [label="R69", fillcolor=5, shape=diamond, style=filled]
  159 -> "159R69" [style=solid]
 "159R69" [label="R69", fillcolor=3, shape=diamond, style=filled]
  160 [label="State 160\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 70                      | expression MOD expression •\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  160 -> 110 [style=solid label="RANGE"]
  160 -> 111 [style=solid label="RANGE_INCL"]
  160 -> 112 [style=dashed label="range"]
  160 -> "160R70d" [label="[RANGE, RANGE_INCL]", style=solid]
 "160R70d" [label="R70", fillcolor=5, shape=diamond, style=filled]
  160 -> "160R70" [style=solid]
 "160R70" [label="R70", fillcolor=3, shape=diamond, style=filled]
  161 [label="State 161\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 82                      | expression EQ expression •\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  161 -> 91 [style=solid label="PLUS"]
  161 -> 92 [style=solid label="MINUS"]
  161 -> 93 [style=solid label="MUL"]
  161 -> 94 [style=solid label="DIV"]
  161 -> 95 [style=solid label="MOD"]
  161 -> 98 [style=solid label="GT"]
  161 -> 99 [style=solid label="LT"]
  161 -> 100 [style=solid label="GTE"]
  161 -> 101 [style=solid label="LTE"]
  161 -> 110 [style=solid label="RANGE"]
  161 -> 111 [style=solid label="RANGE_INCL"]
  161 -> 112 [style=dashed label="range"]
  161 -> "161R82d" [label="[RANGE, RANGE_INCL]", style=solid]
 "161R82d" [label="R82", fillcolor=5, shape=diamond, style=filled]
  161 -> "161R82" [style=solid]
 "161R82" [label="R82", fillcolor=3, shape=diamond, style=filled]
  162 [label="State 162\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 83                      | expression NEQ expression •\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  162 -> 91 [style=solid label="PLUS"]
  162 -> 92 [style=solid label="MINUS"]
  162 -> 93 [style=solid label="MUL"]
  162 -> 94 [style=solid label="DIV"]
  162 -> 95 [style=solid label="MOD"]
  162 -> 98 [style=solid label="GT"]
  162 -> 99 [style=solid label="LT"]
  162 -> 100 [style=solid label="GTE"]
  162 -> 101 [style=solid label="LTE"]
  162 -> 110 [style=solid label="RANGE"]
  162 -> 111 [style=solid label="RANGE_INCL"]
  162 -> 112 [style=dashed label="range"]
  162 -> "162R83d" [label="[RANGE, RANGE_INCL]", style=solid]
 "162R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  162 -> "162R83" [style=solid]
 "162R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  163 [label="State 163\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 79                      | expression GT expression •\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  163 -> 91 [style=solid label="PLUS"]
  163 -> 92 [style=solid label="MINUS"]
  163 -> 93 [style=solid label="MUL"]
  163 -> 94 [style=solid label="DIV"]
  163 -> 95 [style=solid label="MOD"]
  163 -> 110 [style=solid label="RANGE"]
  163 -> 111 [style=solid label="RANGE_INCL"]
  163 -> 112 [style=dashed label="range"]
  163 -> "163R79d" [label="[RANGE, RANGE_INCL]", style=solid]
 "163R79d" [label="R79", fillcolor=5, shape=diamond, style=filled]
  163 -> "163R79" [style=solid]
 "163R79" [label="R79", fillcolor=3, shape=diamond, style=filled]
  164 [label="State 164\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 78                      | expression LT expression •\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  164 -> 91 [style=solid label="PLUS"]
  164 -> 92 [style=solid label="MINUS"]
  164 -> 93 [style=solid label="MUL"]
  164 -> 94 [style=solid label="DIV"]
  164 -> 95 [style=solid label="MOD"]
  164 -> 110 [style=solid label="RANGE"]
  164 -> 111 [style=solid label="RANGE_INCL"]
  164 -> 112 [style=dashed label="range"]
  164 -> "164R78d" [label="[RANGE, RANGE_INCL]", style=solid]
 "164R78d" [label="R78", fillcolor=5, shape=diamond, style=filled]
  164 -> "164R78" [style=solid]
 "164R78" [label="R78", fillcolor=3, shape=diamond, style=filled]
  165 [label="State 165\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 80                      | expression GTE expression •\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  165 -> 91 [style=solid label="PLUS"]
  165 -> 92 [style=solid label="MINUS"]
  165 -> 93 [style=solid label="MUL"]
  165 -> 94 [style=solid label="DIV"]
  165 -> 95 [style=solid label="MOD"]
  165 -> 110 [style=solid label="RANGE"]
  165 -> 111 [style=solid label="RANGE_INCL"]
  165 -> 112 [style=dashed label="range"]
  165 -> "165R80d" [label="[RANGE, RANGE_INCL]", style=solid]
 "165R80d" [label="R80", fillcolor=5, shape=diamond, style=filled]
  165 -> "165R80" [style=solid]
 "165R80" [label="R80", fillcolor=3, shape=diamond, style=filled]
  166 [label="State 166\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 81                      | expression LTE expression •\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  166 -> 91 [style=solid label="PLUS"]
  166 -> 92 [style=solid label="MINUS"]
  166 -> 93 [style=solid label="MUL"]
  166 -> 94 [style=solid label="DIV"]
  166 -> 95 [style=solid label="MOD"]
  166 -> 110 [style=solid label="RANGE"]
  166 -> 111 [style=solid label="RANGE_INCL"]
  166 -> 112 [style=dashed label="range"]
  166 -> "166R81d" [label="[RANGE, RANGE_INCL]", style=solid]
 "166R81d" [label="R81", fillcolor=5, shape=diamond, style=filled]
  166 -> "166R81" [style=solid]
 "166R81" [label="R81", fillcolor=3, shape=diamond, style=filled]
  167 [label="State 167\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 84                   | expression AND expression •\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  167 -> 91 [style=solid label="PLUS"]
  167 -> 92 [style=solid label="MINUS"]
  167 -> 93 [style=solid label="MUL"]
  167 -> 94 [style=solid label="DIV"]
  167 -> 95 [style=solid label="MOD"]
  167 -> 96 [style=solid label="EQ"]
  167 -> 97 [style=solid label="NEQ"]
  167 -> 98 [style=solid label="GT"]
  167 -> 99 [style=solid label="LT"]
  167 -> 100 [style=solid label="GTE"]
  167 -> 101 [style=solid label="LTE"]
  167 -> 110 [style=solid label="RANGE"]
  167 -> 111 [style=solid label="RANGE_INCL"]
  167 -> 112 [style=dashed label="range"]
  167 -> "167R84d" [label="[RANGE, RANGE_INCL]", style=solid]
 "167R84d" [label="R84", fillcolor=5, shape=diamond, style=filled]
  167 -> "167R84" [style=solid]
 "167R84" [label="R84", fillcolor=3, shape=diamond, style=filled]
  168 [label="State 168\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l 85                   | expression OR expression •\l217 array_literal: expression • range expression\l"]
  168 -> 91 [style=solid label="PLUS"]
  168 -> 92 [style=solid label="MINUS"]
  168 -> 93 [style=solid label="MUL"]
  168 -> 94 [style=solid label="DIV"]
  168 -> 95 [style=solid label="MOD"]
  168 -> 96 [style=solid label="EQ"]
  168 -> 97 [style=solid label="NEQ"]
  168 -> 98 [style=solid label="GT"]
  168 -> 99 [style=solid label="LT"]
  168 -> 100 [style=solid label="GTE"]
  168 -> 101 [style=solid label="LTE"]
  168 -> 102 [style=solid label="AND"]
  168 -> 110 [style=solid label="RANGE"]
  168 -> 111 [style=solid label="RANGE_INCL"]
  168 -> 112 [style=dashed label="range"]
  168 -> "168R85d" [label="[RANGE, RANGE_INCL]", style=solid]
 "168R85d" [label="R85", fillcolor=5, shape=diamond, style=filled]
  168 -> "168R85" [style=solid]
 "168R85" [label="R85", fillcolor=3, shape=diamond, style=filled]
  169 [label="State 169\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 72                      | expression ADD_ASSIGN expression •\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  169 -> 90 [style=solid label="ASSIGN"]
  169 -> 91 [style=solid label="PLUS"]
  169 -> 92 [style=solid label="MINUS"]
  169 -> 93 [style=solid label="MUL"]
  169 -> 94 [style=solid label="DIV"]
  169 -> 95 [style=solid label="MOD"]
  169 -> 96 [style=solid label="EQ"]
  169 -> 97 [style=solid label="NEQ"]
  169 -> 98 [style=solid label="GT"]
  169 -> 99 [style=solid label="LT"]
  169 -> 100 [style=solid label="GTE"]
  169 -> 101 [style=solid label="LTE"]
  169 -> 102 [style=solid label="AND"]
  169 -> 103 [style=solid label="OR"]
  169 -> 104 [style=solid label="ADD_ASSIGN"]
  169 -> 105 [style=solid label="SUB_ASSIGN"]
  169 -> 106 [style=solid label="MUL_ASSIGN"]
  169 -> 107 [style=solid label="DIV_ASSIGN"]
  169 -> 108 [style=solid label="MOD_ASSIGN"]
  169 -> 110 [style=solid label="RANGE"]
  169 -> 111 [style=solid label="RANGE_INCL"]
  169 -> 112 [style=dashed label="range"]
  169 -> "169R72d" [label="[RANGE, RANGE_INCL]", style=solid]
 "169R72d" [label="R72", fillcolor=5, shape=diamond, style=filled]
  169 -> "169R72" [style=solid]
 "169R72" [label="R72", fillcolor=3, shape=diamond, style=filled]
  170 [label="State 170\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 73                      | expression SUB_ASSIGN expression •\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  170 -> 90 [style=solid label="ASSIGN"]
  170 -> 91 [style=solid label="PLUS"]
  170 -> 92 [style=solid label="MINUS"]
  170 -> 93 [style=solid label="MUL"]
  170 -> 94 [style=solid label="DIV"]
  170 -> 95 [style=solid label="MOD"]
  170 -> 96 [style=solid label="EQ"]
  170 -> 97 [style=solid label="NEQ"]
  170 -> 98 [style=solid label="GT"]
  170 -> 99 [style=solid label="LT"]
  170 -> 100 [style=solid label="GTE"]
  170 -> 101 [style=solid label="LTE"]
  170 -> 102 [style=solid label="AND"]
  170 -> 103 [style=solid label="OR"]
  170 -> 104 [style=solid label="ADD_ASSIGN"]
  170 -> 105 [style=solid label="SUB_ASSIGN"]
  170 -> 106 [style=solid label="MUL_ASSIGN"]
  170 -> 107 [style=solid label="DIV_ASSIGN"]
  170 -> 108 [style=solid label="MOD_ASSIGN"]
  170 -> 110 [style=solid label="RANGE"]
  170 -> 111 [style=solid label="RANGE_INCL"]
  170 -> 112 [style=dashed label="range"]
  170 -> "170R73d" [label="[RANGE, RANGE_INCL]", style=solid]
 "170R73d" [label="R73", fillcolor=5, shape=diamond, style=filled]
  170 -> "170R73" [style=solid]
 "170R73" [label="R73", fillcolor=3, shape=diamond, style=filled]
  171 [label="State 171\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 74                      | expression MUL_ASSIGN expression •\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  171 -> 90 [style=solid label="ASSIGN"]
  171 -> 91 [style=solid label="PLUS"]
  171 -> 92 [style=solid label="MINUS"]
  171 -> 93 [style=solid label="MUL"]
  171 -> 94 [style=solid label="DIV"]
  171 -> 95 [style=solid label="MOD"]
  171 -> 96 [style=solid label="EQ"]
  171 -> 97 [style=solid label="NEQ"]
  171 -> 98 [style=solid label="GT"]
  171 -> 99 [style=solid label="LT"]
  171 -> 100 [style=solid label="GTE"]
  171 -> 101 [style=solid label="LTE"]
  171 -> 102 [style=solid label="AND"]
  171 -> 103 [style=solid label="OR"]
  171 -> 104 [style=solid label="ADD_ASSIGN"]
  171 -> 105 [style=solid label="SUB_ASSIGN"]
  171 -> 106 [style=solid label="MUL_ASSIGN"]
  171 -> 107 [style=solid label="DIV_ASSIGN"]
  171 -> 108 [style=solid label="MOD_ASSIGN"]
  171 -> 110 [style=solid label="RANGE"]
  171 -> 111 [style=solid label="RANGE_INCL"]
  171 -> 112 [style=dashed label="range"]
  171 -> "171R74d" [label="[RANGE, RANGE_INCL]", style=solid]
 "171R74d" [label="R74", fillcolor=5, shape=diamond, style=filled]
  171 -> "171R74" [style=solid]
 "171R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
  172 [label="State 172\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 75                      | expression DIV_ASSIGN expression •\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  172 -> 90 [style=solid label="ASSIGN"]
  172 -> 91 [style=solid label="PLUS"]
  172 -> 92 [style=solid label="MINUS"]
  172 -> 93 [style=solid label="MUL"]
  172 -> 94 [style=solid label="DIV"]
  172 -> 95 [style=solid label="MOD"]
  172 -> 96 [style=solid label="EQ"]
  172 -> 97 [style=solid label="NEQ"]
  172 -> 98 [style=solid label="GT"]
  172 -> 99 [style=solid label="LT"]
  172 -> 100 [style=solid label="GTE"]
  172 -> 101 [style=solid label="LTE"]
  172 -> 102 [style=solid label="AND"]
  172 -> 103 [style=solid label="OR"]
  172 -> 104 [style=solid label="ADD_ASSIGN"]
  172 -> 105 [style=solid label="SUB_ASSIGN"]
  172 -> 106 [style=solid label="MUL_ASSIGN"]
  172 -> 107 [style=solid label="DIV_ASSIGN"]
  172 -> 108 [style=solid label="MOD_ASSIGN"]
  172 -> 110 [style=solid label="RANGE"]
  172 -> 111 [style=solid label="RANGE_INCL"]
  172 -> 112 [style=dashed label="range"]
  172 -> "172R75d" [label="[RANGE, RANGE_INCL]", style=solid]
 "172R75d" [label="R75", fillcolor=5, shape=diamond, style=filled]
  172 -> "172R75" [style=solid]
 "172R75" [label="R75", fillcolor=3, shape=diamond, style=filled]
  173 [label="State 173\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 76                      | expression MOD_ASSIGN expression •\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  173 -> 90 [style=solid label="ASSIGN"]
  173 -> 91 [style=solid label="PLUS"]
  173 -> 92 [style=solid label="MINUS"]
  173 -> 93 [style=solid label="MUL"]
  173 -> 94 [style=solid label="DIV"]
  173 -> 95 [style=solid label="MOD"]
  173 -> 96 [style=solid label="EQ"]
  173 -> 97 [style=solid label="NEQ"]
  173 -> 98 [style=solid label="GT"]
  173 -> 99 [style=solid label="LT"]
  173 -> 100 [style=solid label="GTE"]
  173 -> 101 [style=solid label="LTE"]
  173 -> 102 [style=solid label="AND"]
  173 -> 103 [style=solid label="OR"]
  173 -> 104 [style=solid label="ADD_ASSIGN"]
  173 -> 105 [style=solid label="SUB_ASSIGN"]
  173 -> 106 [style=solid label="MUL_ASSIGN"]
  173 -> 107 [style=solid label="DIV_ASSIGN"]
  173 -> 108 [style=solid label="MOD_ASSIGN"]
  173 -> 110 [style=solid label="RANGE"]
  173 -> 111 [style=solid label="RANGE_INCL"]
  173 -> 112 [style=dashed label="range"]
  173 -> "173R76d" [label="[RANGE, RANGE_INCL]", style=solid]
 "173R76d" [label="R76", fillcolor=5, shape=diamond, style=filled]
  173 -> "173R76" [style=solid]
 "173R76" [label="R76", fillcolor=3, shape=diamond, style=filled]
  174 [label="State 174\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l217              | expression range expression •\l"]
  174 -> 90 [style=solid label="ASSIGN"]
  174 -> 91 [style=solid label="PLUS"]
  174 -> 92 [style=solid label="MINUS"]
  174 -> 93 [style=solid label="MUL"]
  174 -> 94 [style=solid label="DIV"]
  174 -> 95 [style=solid label="MOD"]
  174 -> 96 [style=solid label="EQ"]
  174 -> 97 [style=solid label="NEQ"]
  174 -> 98 [style=solid label="GT"]
  174 -> 99 [style=solid label="LT"]
  174 -> 100 [style=solid label="GTE"]
  174 -> 101 [style=solid label="LTE"]
  174 -> 102 [style=solid label="AND"]
  174 -> 103 [style=solid label="OR"]
  174 -> 104 [style=solid label="ADD_ASSIGN"]
  174 -> 105 [style=solid label="SUB_ASSIGN"]
  174 -> 106 [style=solid label="MUL_ASSIGN"]
  174 -> 107 [style=solid label="DIV_ASSIGN"]
  174 -> 108 [style=solid label="MOD_ASSIGN"]
  174 -> 110 [style=solid label="RANGE"]
  174 -> 111 [style=solid label="RANGE_INCL"]
  174 -> 112 [style=dashed label="range"]
  174 -> "174R217d" [label="[ASSIGN, PLUS, MINUS, MUL, DIV, MOD, EQ, NEQ, GT, LT, GTE, LTE, AND, OR, ADD_ASSIGN, SUB_ASSIGN, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, RANGE, RANGE_INCL]", style=solid]
 "174R217d" [label="R217", fillcolor=5, shape=diamond, style=filled]
  174 -> "174R217" [style=solid]
 "174R217" [label="R217", fillcolor=3, shape=diamond, style=filled]
  175 [label="State 175\n\l228 identifier_chain: identifier_chain DOT IDENTIFIER •\l"]
  175 -> "175R228" [style=solid]
 "175R228" [label="R228", fillcolor=3, shape=diamond, style=filled]
  176 [label="State 176\n\l 42 return_statement: RETURN expression SEMICOLON •\l"]
  176 -> "176R42" [style=solid]
 "176R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
  177 [label="State 177\n\l153 taskgroup_argument: LOG • ASSIGN STRING_LITERAL\l"]
  177 -> 210 [style=solid label="ASSIGN"]
  178 [label="State 178\n\l154 taskgroup_argument: NUM_THREADS • ASSIGN number\l"]
  178 -> 211 [style=solid label="ASSIGN"]
  179 [label="State 179\n\l149 taskgroup_statement: TASKGROUP IDENTIFIER LPAREN taskgroup_argument_list • RPAREN LBRACE taskgroup_definition RBRACE SEMICOLON\l"]
  179 -> 212 [style=solid label="RPAREN"]
  180 [label="State 180\n\l151 taskgroup_argument_list: taskgroup_argument • COMMA taskgroup_argument\l152                        | taskgroup_argument •\l"]
  180 -> 213 [style=solid label="COMMA"]
  180 -> "180R152" [style=solid]
 "180R152" [label="R152", fillcolor=3, shape=diamond, style=filled]
  181 [label="State 181\n\l159 task_declaration: TASK • IDENTIFIER LBRACE task_statement_list RBRACE\l160                 | TASK • IDENTIFIER LPAREN NUM_THREADS ASSIGN number RPAREN LBRACE task_statement_list RBRACE\l"]
  181 -> 214 [style=solid label="IDENTIFIER"]
  182 [label="State 182\n\l161 task_declaration: SUPERVISOR • IDENTIFIER LBRACE supervisor_statement_list RBRACE\l"]
  182 -> 215 [style=solid label="IDENTIFIER"]
  183 [label="State 183\n\l150 taskgroup_statement: TASKGROUP IDENTIFIER LBRACE taskgroup_definition • RBRACE SEMICOLON\l"]
  183 -> 216 [style=solid label="RBRACE"]
  184 [label="State 184\n\l155 taskgroup_definition: task_declaration_list • properties_declaration\l157 task_declaration_list: task_declaration_list • task_declaration\l"]
  184 -> 181 [style=solid label="TASK"]
  184 -> 217 [style=solid label="PROPERTIES"]
  184 -> 182 [style=solid label="SUPERVISOR"]
  184 -> 218 [style=dashed label="task_declaration"]
  184 -> 219 [style=dashed label="properties_declaration"]
  184 -> "184R182" [style=solid]
 "184R182" [label="R182", fillcolor=3, shape=diamond, style=filled]
  185 [label="State 185\n\l158 task_declaration_list: task_declaration •\l"]
  185 -> "185R158" [style=solid]
 "185R158" [label="R158", fillcolor=3, shape=diamond, style=filled]
  186 [label="State 186\n\l128 parallel_stmt_argument: PRIVATE ASSIGN • LBRACKET identifier_list RBRACKET\l"]
  186 -> 220 [style=solid label="LBRACKET"]
  187 [label="State 187\n\l127 parallel_stmt_argument: SHARED ASSIGN • LBRACKET identifier_list RBRACKET\l"]
  187 -> 221 [style=solid label="LBRACKET"]
  188 [label="State 188\n\l130 parallel_stmt_argument: SCHEDULE ASSIGN • schedule_list\l"]
  188 -> 222 [style=solid label="DYNAMIC_SCHEDULE"]
  188 -> 223 [style=solid label="STATIC_SCHEDULE"]
  188 -> 224 [style=dashed label="schedule_list"]
  189 [label="State 189\n\l131 parallel_stmt_argument: NUM_THREADS ASSIGN • INT_LITERAL\l"]
  189 -> 225 [style=solid label="INT_LITERAL"]
  190 [label="State 190\n\l129 parallel_stmt_argument: REDUCTION ASSIGN • LBRACKET reduction_list RBRACKET\l"]
  190 -> 226 [style=solid label="LBRACKET"]
  191 [label="State 191\n\l122 parallel_statement: PARALLEL LPAREN parallel_stmt_argument_list RPAREN • compound_statement\l124                   | PARALLEL LPAREN parallel_stmt_argument_list RPAREN • iterative_statement\l"]
  191 -> 6 [style=solid label="LBRACE"]
  191 -> 18 [style=solid label="FOR"]
  191 -> 227 [style=dashed label="compound_statement"]
  191 -> 228 [style=dashed label="iterative_statement"]
  192 [label="State 192\n\l125 parallel_stmt_argument_list: parallel_stmt_argument_list COMMA • parallel_stmt_argument\l"]
  192 -> 126 [style=solid label="PRIVATE"]
  192 -> 127 [style=solid label="SHARED"]
  192 -> 128 [style=solid label="SCHEDULE"]
  192 -> 129 [style=solid label="NUM_THREADS"]
  192 -> 130 [style=solid label="REDUCTION"]
  192 -> 229 [style=dashed label="parallel_stmt_argument"]
  193 [label="State 193\n\l112 function_declaration: FUNC IDENTIFIER dtype LPAREN • parameter_list RPAREN compound_statement\l"]
  193 -> 1 [style=dotted]
  193 -> 9 [style=solid label="INT"]
  193 -> 10 [style=solid label="CHAR"]
  193 -> 11 [style=solid label="LONG"]
  193 -> 12 [style=solid label="BOOL"]
  193 -> 13 [style=solid label="FLOAT"]
  193 -> 14 [style=solid label="STRING"]
  193 -> 59 [style=solid label="STRUCT"]
  193 -> 230 [style=dashed label="generic_dtypes"]
  193 -> 231 [style=dashed label="dtype"]
  193 -> 31 [style=dashed label="array"]
  193 -> 232 [style=dashed label="datatype_and_ref"]
  193 -> 233 [style=dashed label="parameter_dtype"]
  193 -> 234 [style=dashed label="parameter_list"]
  193 -> 235 [style=dashed label="parameter_declaration"]
  193 -> "193R119" [label="[RPAREN, COMMA]", style=solid]
 "193R119" [label="R119", fillcolor=3, shape=diamond, style=filled]
  194 [label="State 194\n\l 46 struct_declaration: STRUCT IDENTIFIER LBRACE member_data_list • RBRACE SEMICOLON\l 47 member_data_list: member_data_list • member_data\l"]
  194 -> 1 [style=dotted]
  194 -> 236 [style=solid label="RBRACE"]
  194 -> 9 [style=solid label="INT"]
  194 -> 10 [style=solid label="CHAR"]
  194 -> 11 [style=solid label="LONG"]
  194 -> 12 [style=solid label="BOOL"]
  194 -> 13 [style=solid label="FLOAT"]
  194 -> 14 [style=solid label="STRING"]
  194 -> 59 [style=solid label="STRUCT"]
  194 -> 29 [style=dashed label="generic_dtypes"]
  194 -> 237 [style=dashed label="dtype"]
  194 -> 31 [style=dashed label="array"]
  194 -> 238 [style=dashed label="member_data"]
  195 [label="State 195\n\l108 selection_statement: IF LPAREN expression RPAREN • compound_statement if_chain_statement\l109                    | IF LPAREN expression RPAREN • compound_statement ELSE compound_statement\l"]
  195 -> 6 [style=solid label="LBRACE"]
  195 -> 239 [style=dashed label="compound_statement"]
  196 [label="State 196\n\l100 iterative_statement: FOR LPAREN expression_statement expression_statement • expression RPAREN compound_statement\l"]
  196 -> 2 [style=solid label="MINUS"]
  196 -> 3 [style=solid label="NOT"]
  196 -> 5 [style=solid label="LPAREN"]
  196 -> 19 [style=solid label="TRUE"]
  196 -> 20 [style=solid label="FALSE"]
  196 -> 21 [style=solid label="IDENTIFIER"]
  196 -> 22 [style=solid label="INT_LITERAL"]
  196 -> 23 [style=solid label="FLOAT_LITERAL"]
  196 -> 24 [style=solid label="STRING_LITERAL"]
  196 -> 25 [style=solid label="CHARACTER_LITERAL"]
  196 -> 32 [style=dashed label="array_element"]
  196 -> 240 [style=dashed label="expression"]
  196 -> 38 [style=dashed label="function_call"]
  196 -> 39 [style=dashed label="unary_operator"]
  196 -> 40 [style=dashed label="arithmetic_expression"]
  196 -> 41 [style=dashed label="assignment_expression"]
  196 -> 42 [style=dashed label="unary_expression"]
  196 -> 43 [style=dashed label="comparison_expression"]
  196 -> 44 [style=dashed label="logical_expression"]
  196 -> 51 [style=dashed label="array_literal"]
  196 -> 52 [style=dashed label="literals"]
  196 -> 53 [style=dashed label="value"]
  196 -> 54 [style=dashed label="identifier_chain"]
  197 [label="State 197\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l101 iterative_statement: FOR iterator IN expression • compound_statement\l217 array_literal: expression • range expression\l"]
  197 -> 90 [style=solid label="ASSIGN"]
  197 -> 91 [style=solid label="PLUS"]
  197 -> 92 [style=solid label="MINUS"]
  197 -> 93 [style=solid label="MUL"]
  197 -> 94 [style=solid label="DIV"]
  197 -> 95 [style=solid label="MOD"]
  197 -> 96 [style=solid label="EQ"]
  197 -> 97 [style=solid label="NEQ"]
  197 -> 98 [style=solid label="GT"]
  197 -> 99 [style=solid label="LT"]
  197 -> 100 [style=solid label="GTE"]
  197 -> 101 [style=solid label="LTE"]
  197 -> 102 [style=solid label="AND"]
  197 -> 103 [style=solid label="OR"]
  197 -> 104 [style=solid label="ADD_ASSIGN"]
  197 -> 105 [style=solid label="SUB_ASSIGN"]
  197 -> 106 [style=solid label="MUL_ASSIGN"]
  197 -> 107 [style=solid label="DIV_ASSIGN"]
  197 -> 108 [style=solid label="MOD_ASSIGN"]
  197 -> 6 [style=solid label="LBRACE"]
  197 -> 110 [style=solid label="RANGE"]
  197 -> 111 [style=solid label="RANGE_INCL"]
  197 -> 241 [style=dashed label="compound_statement"]
  197 -> 112 [style=dashed label="range"]
  198 [label="State 198\n\l 95 list_initialiser: LBRACE list_member • initialiser_member_list_tail RBRACE\l"]
  198 -> 200 [style=solid label="COMMA"]
  198 -> 242 [style=dashed label="initialiser_member_list_tail"]
  198 -> "198R97" [style=solid]
 "198R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
  199 [label="State 199\n\l 62 function_call_tail: function_arguments RPAREN •\l"]
  199 -> "199R62" [style=solid]
 "199R62" [label="R62", fillcolor=3, shape=diamond, style=filled]
  200 [label="State 200\n\l 96 initialiser_member_list_tail: COMMA • list_member initialiser_member_list_tail\l"]
  200 -> 2 [style=solid label="MINUS"]
  200 -> 3 [style=solid label="NOT"]
  200 -> 5 [style=solid label="LPAREN"]
  200 -> 140 [style=solid label="LBRACE"]
  200 -> 19 [style=solid label="TRUE"]
  200 -> 20 [style=solid label="FALSE"]
  200 -> 21 [style=solid label="IDENTIFIER"]
  200 -> 22 [style=solid label="INT_LITERAL"]
  200 -> 23 [style=solid label="FLOAT_LITERAL"]
  200 -> 24 [style=solid label="STRING_LITERAL"]
  200 -> 25 [style=solid label="CHARACTER_LITERAL"]
  200 -> 32 [style=dashed label="array_element"]
  200 -> 141 [style=dashed label="expression"]
  200 -> 38 [style=dashed label="function_call"]
  200 -> 39 [style=dashed label="unary_operator"]
  200 -> 40 [style=dashed label="arithmetic_expression"]
  200 -> 41 [style=dashed label="assignment_expression"]
  200 -> 42 [style=dashed label="unary_expression"]
  200 -> 43 [style=dashed label="comparison_expression"]
  200 -> 44 [style=dashed label="logical_expression"]
  200 -> 144 [style=dashed label="list_initialiser"]
  200 -> 243 [style=dashed label="list_member"]
  200 -> 51 [style=dashed label="array_literal"]
  200 -> 52 [style=dashed label="literals"]
  200 -> 53 [style=dashed label="value"]
  200 -> 54 [style=dashed label="identifier_chain"]
  201 [label="State 201\n\l 63 function_arguments: list_member initialiser_member_list_tail •\l"]
  201 -> "201R63" [style=solid]
 "201R63" [label="R63", fillcolor=3, shape=diamond, style=filled]
  202 [label="State 202\n\l 19 dims: LBRACKET expression RBRACKET •\l"]
  202 -> "202R19" [style=solid]
 "202R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  203 [label="State 203\n\l 18 dims: dims LBRACKET expression • RBRACKET\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  203 -> 90 [style=solid label="ASSIGN"]
  203 -> 91 [style=solid label="PLUS"]
  203 -> 92 [style=solid label="MINUS"]
  203 -> 93 [style=solid label="MUL"]
  203 -> 94 [style=solid label="DIV"]
  203 -> 95 [style=solid label="MOD"]
  203 -> 96 [style=solid label="EQ"]
  203 -> 97 [style=solid label="NEQ"]
  203 -> 98 [style=solid label="GT"]
  203 -> 99 [style=solid label="LT"]
  203 -> 100 [style=solid label="GTE"]
  203 -> 101 [style=solid label="LTE"]
  203 -> 102 [style=solid label="AND"]
  203 -> 103 [style=solid label="OR"]
  203 -> 104 [style=solid label="ADD_ASSIGN"]
  203 -> 105 [style=solid label="SUB_ASSIGN"]
  203 -> 106 [style=solid label="MUL_ASSIGN"]
  203 -> 107 [style=solid label="DIV_ASSIGN"]
  203 -> 108 [style=solid label="MOD_ASSIGN"]
  203 -> 244 [style=solid label="RBRACKET"]
  203 -> 110 [style=solid label="RANGE"]
  203 -> 111 [style=solid label="RANGE_INCL"]
  203 -> 112 [style=dashed label="range"]
  204 [label="State 204\n\l 18 dims: dims LBRACKET expression • RBRACKET\l 20 initializer_dims: LBRACKET expression • COMMA expression RBRACKET\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  204 -> 90 [style=solid label="ASSIGN"]
  204 -> 91 [style=solid label="PLUS"]
  204 -> 92 [style=solid label="MINUS"]
  204 -> 93 [style=solid label="MUL"]
  204 -> 94 [style=solid label="DIV"]
  204 -> 95 [style=solid label="MOD"]
  204 -> 96 [style=solid label="EQ"]
  204 -> 97 [style=solid label="NEQ"]
  204 -> 98 [style=solid label="GT"]
  204 -> 99 [style=solid label="LT"]
  204 -> 100 [style=solid label="GTE"]
  204 -> 101 [style=solid label="LTE"]
  204 -> 102 [style=solid label="AND"]
  204 -> 103 [style=solid label="OR"]
  204 -> 104 [style=solid label="ADD_ASSIGN"]
  204 -> 105 [style=solid label="SUB_ASSIGN"]
  204 -> 106 [style=solid label="MUL_ASSIGN"]
  204 -> 107 [style=solid label="DIV_ASSIGN"]
  204 -> 108 [style=solid label="MOD_ASSIGN"]
  204 -> 244 [style=solid label="RBRACKET"]
  204 -> 245 [style=solid label="COMMA"]
  204 -> 110 [style=solid label="RANGE"]
  204 -> 111 [style=solid label="RANGE_INCL"]
  204 -> 112 [style=dashed label="range"]
  205 [label="State 205\n\l 89 declaration: REFERENCE IDENTIFIER ASSIGN • IDENTIFIER\l"]
  205 -> 246 [style=solid label="IDENTIFIER"]
  206 [label="State 206\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l 93 initializer: expression •\l217 array_literal: expression • range expression\l"]
  206 -> 90 [style=solid label="ASSIGN"]
  206 -> 91 [style=solid label="PLUS"]
  206 -> 92 [style=solid label="MINUS"]
  206 -> 93 [style=solid label="MUL"]
  206 -> 94 [style=solid label="DIV"]
  206 -> 95 [style=solid label="MOD"]
  206 -> 96 [style=solid label="EQ"]
  206 -> 97 [style=solid label="NEQ"]
  206 -> 98 [style=solid label="GT"]
  206 -> 99 [style=solid label="LT"]
  206 -> 100 [style=solid label="GTE"]
  206 -> 101 [style=solid label="LTE"]
  206 -> 102 [style=solid label="AND"]
  206 -> 103 [style=solid label="OR"]
  206 -> 104 [style=solid label="ADD_ASSIGN"]
  206 -> 105 [style=solid label="SUB_ASSIGN"]
  206 -> 106 [style=solid label="MUL_ASSIGN"]
  206 -> 107 [style=solid label="DIV_ASSIGN"]
  206 -> 108 [style=solid label="MOD_ASSIGN"]
  206 -> 110 [style=solid label="RANGE"]
  206 -> 111 [style=solid label="RANGE_INCL"]
  206 -> 112 [style=dashed label="range"]
  206 -> "206R93" [style=solid]
 "206R93" [label="R93", fillcolor=3, shape=diamond, style=filled]
  207 [label="State 207\n\l 91 value_assign: ASSIGN initializer •\l"]
  207 -> "207R91" [style=solid]
 "207R91" [label="R91", fillcolor=3, shape=diamond, style=filled]
  208 [label="State 208\n\l 94 initializer: list_initialiser •\l"]
  208 -> "208R94" [style=solid]
 "208R94" [label="R94", fillcolor=3, shape=diamond, style=filled]
  209 [label="State 209\n\l 87 declaration_list: declaration_list COMMA declaration •\l"]
  209 -> "209R87" [style=solid]
 "209R87" [label="R87", fillcolor=3, shape=diamond, style=filled]
  210 [label="State 210\n\l153 taskgroup_argument: LOG ASSIGN • STRING_LITERAL\l"]
  210 -> 247 [style=solid label="STRING_LITERAL"]
  211 [label="State 211\n\l154 taskgroup_argument: NUM_THREADS ASSIGN • number\l"]
  211 -> 113 [style=solid label="IDENTIFIER"]
  211 -> 114 [style=solid label="INT_LITERAL"]
  211 -> 248 [style=dashed label="number"]
  212 [label="State 212\n\l149 taskgroup_statement: TASKGROUP IDENTIFIER LPAREN taskgroup_argument_list RPAREN • LBRACE taskgroup_definition RBRACE SEMICOLON\l"]
  212 -> 249 [style=solid label="LBRACE"]
  213 [label="State 213\n\l151 taskgroup_argument_list: taskgroup_argument COMMA • taskgroup_argument\l"]
  213 -> 177 [style=solid label="LOG"]
  213 -> 178 [style=solid label="NUM_THREADS"]
  213 -> 250 [style=dashed label="taskgroup_argument"]
  214 [label="State 214\n\l159 task_declaration: TASK IDENTIFIER • LBRACE task_statement_list RBRACE\l160                 | TASK IDENTIFIER • LPAREN NUM_THREADS ASSIGN number RPAREN LBRACE task_statement_list RBRACE\l"]
  214 -> 251 [style=solid label="LPAREN"]
  214 -> 252 [style=solid label="LBRACE"]
  215 [label="State 215\n\l161 task_declaration: SUPERVISOR IDENTIFIER • LBRACE supervisor_statement_list RBRACE\l"]
  215 -> 253 [style=solid label="LBRACE"]
  216 [label="State 216\n\l150 taskgroup_statement: TASKGROUP IDENTIFIER LBRACE taskgroup_definition RBRACE • SEMICOLON\l"]
  216 -> 254 [style=solid label="SEMICOLON"]
  217 [label="State 217\n\l181 properties_declaration: PROPERTIES • LBRACE taskgroup_properties RBRACE\l"]
  217 -> 255 [style=solid label="LBRACE"]
  218 [label="State 218\n\l157 task_declaration_list: task_declaration_list task_declaration •\l"]
  218 -> "218R157" [style=solid]
 "218R157" [label="R157", fillcolor=3, shape=diamond, style=filled]
  219 [label="State 219\n\l155 taskgroup_definition: task_declaration_list properties_declaration •\l"]
  219 -> "219R155" [style=solid]
 "219R155" [label="R155", fillcolor=3, shape=diamond, style=filled]
  220 [label="State 220\n\l128 parallel_stmt_argument: PRIVATE ASSIGN LBRACKET • identifier_list RBRACKET\l"]
  220 -> 256 [style=solid label="IDENTIFIER"]
  220 -> 257 [style=dashed label="identifier_list"]
  221 [label="State 221\n\l127 parallel_stmt_argument: SHARED ASSIGN LBRACKET • identifier_list RBRACKET\l"]
  221 -> 256 [style=solid label="IDENTIFIER"]
  221 -> 258 [style=dashed label="identifier_list"]
  222 [label="State 222\n\l133 schedule_list: DYNAMIC_SCHEDULE •\l"]
  222 -> "222R133" [style=solid]
 "222R133" [label="R133", fillcolor=3, shape=diamond, style=filled]
  223 [label="State 223\n\l132 schedule_list: STATIC_SCHEDULE •\l"]
  223 -> "223R132" [style=solid]
 "223R132" [label="R132", fillcolor=3, shape=diamond, style=filled]
  224 [label="State 224\n\l130 parallel_stmt_argument: SCHEDULE ASSIGN schedule_list •\l"]
  224 -> "224R130" [style=solid]
 "224R130" [label="R130", fillcolor=3, shape=diamond, style=filled]
  225 [label="State 225\n\l131 parallel_stmt_argument: NUM_THREADS ASSIGN INT_LITERAL •\l"]
  225 -> "225R131" [style=solid]
 "225R131" [label="R131", fillcolor=3, shape=diamond, style=filled]
  226 [label="State 226\n\l129 parallel_stmt_argument: REDUCTION ASSIGN LBRACKET • reduction_list RBRACKET\l"]
  226 -> 259 [style=solid label="PLUS"]
  226 -> 260 [style=solid label="MINUS"]
  226 -> 261 [style=solid label="MUL"]
  226 -> 262 [style=solid label="DIV"]
  226 -> 263 [style=solid label="MOD"]
  226 -> 264 [style=dashed label="reduction_list"]
  226 -> 265 [style=dashed label="reduction_operator_list"]
  227 [label="State 227\n\l122 parallel_statement: PARALLEL LPAREN parallel_stmt_argument_list RPAREN compound_statement •\l"]
  227 -> "227R122" [style=solid]
 "227R122" [label="R122", fillcolor=3, shape=diamond, style=filled]
  228 [label="State 228\n\l124 parallel_statement: PARALLEL LPAREN parallel_stmt_argument_list RPAREN iterative_statement •\l"]
  228 -> "228R124" [style=solid]
 "228R124" [label="R124", fillcolor=3, shape=diamond, style=filled]
  229 [label="State 229\n\l125 parallel_stmt_argument_list: parallel_stmt_argument_list COMMA parallel_stmt_argument •\l"]
  229 -> "229R125" [style=solid]
 "229R125" [label="R125", fillcolor=3, shape=diamond, style=filled]
  230 [label="State 230\n\l 14 dtype: generic_dtypes •\l 16 array: generic_dtypes • dims initializer_dims\l115 parameter_dtype: generic_dtypes •\l116                | generic_dtypes • dims\l"]
  230 -> 81 [style=solid label="LBRACKET"]
  230 -> 266 [style=dashed label="dims"]
  230 -> "230R14" [style=solid]
 "230R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  230 -> "230R115" [label="[IDENTIFIER]", style=solid]
 "230R115" [label="R115", fillcolor=3, shape=diamond, style=filled]
  231 [label="State 231\n\l114 datatype_and_ref: dtype • REFERENCE\l"]
  231 -> 267 [style=solid label="REFERENCE"]
  232 [label="State 232\n\l120 parameter_declaration: datatype_and_ref • IDENTIFIER\l121                      | datatype_and_ref • IDENTIFIER ASSIGN expression\l"]
  232 -> 268 [style=solid label="IDENTIFIER"]
  233 [label="State 233\n\l113 datatype_and_ref: parameter_dtype •\l"]
  233 -> "233R113" [style=solid]
 "233R113" [label="R113", fillcolor=3, shape=diamond, style=filled]
  234 [label="State 234\n\l112 function_declaration: FUNC IDENTIFIER dtype LPAREN parameter_list • RPAREN compound_statement\l117 parameter_list: parameter_list • COMMA parameter_declaration\l"]
  234 -> 269 [style=solid label="RPAREN"]
  234 -> 270 [style=solid label="COMMA"]
  235 [label="State 235\n\l118 parameter_list: parameter_declaration •\l"]
  235 -> "235R118" [style=solid]
 "235R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
  236 [label="State 236\n\l 46 struct_declaration: STRUCT IDENTIFIER LBRACE member_data_list RBRACE • SEMICOLON\l"]
  236 -> 271 [style=solid label="SEMICOLON"]
  237 [label="State 237\n\l 49 member_data: dtype • IDENTIFIER value_assign SEMICOLON\l"]
  237 -> 272 [style=solid label="IDENTIFIER"]
  238 [label="State 238\n\l 47 member_data_list: member_data_list member_data •\l"]
  238 -> "238R47" [style=solid]
 "238R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
  239 [label="State 239\n\l108 selection_statement: IF LPAREN expression RPAREN compound_statement • if_chain_statement\l109                    | IF LPAREN expression RPAREN compound_statement • ELSE compound_statement\l"]
  239 -> 273 [style=solid label="ELSE"]
  239 -> 274 [style=dashed label="if_chain_statement"]
  239 -> "239R111" [style=solid]
 "239R111" [label="R111", fillcolor=3, shape=diamond, style=filled]
  240 [label="State 240\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l100 iterative_statement: FOR LPAREN expression_statement expression_statement expression • RPAREN compound_statement\l217 array_literal: expression • range expression\l"]
  240 -> 90 [style=solid label="ASSIGN"]
  240 -> 91 [style=solid label="PLUS"]
  240 -> 92 [style=solid label="MINUS"]
  240 -> 93 [style=solid label="MUL"]
  240 -> 94 [style=solid label="DIV"]
  240 -> 95 [style=solid label="MOD"]
  240 -> 96 [style=solid label="EQ"]
  240 -> 97 [style=solid label="NEQ"]
  240 -> 98 [style=solid label="GT"]
  240 -> 99 [style=solid label="LT"]
  240 -> 100 [style=solid label="GTE"]
  240 -> 101 [style=solid label="LTE"]
  240 -> 102 [style=solid label="AND"]
  240 -> 103 [style=solid label="OR"]
  240 -> 104 [style=solid label="ADD_ASSIGN"]
  240 -> 105 [style=solid label="SUB_ASSIGN"]
  240 -> 106 [style=solid label="MUL_ASSIGN"]
  240 -> 107 [style=solid label="DIV_ASSIGN"]
  240 -> 108 [style=solid label="MOD_ASSIGN"]
  240 -> 275 [style=solid label="RPAREN"]
  240 -> 110 [style=solid label="RANGE"]
  240 -> 111 [style=solid label="RANGE_INCL"]
  240 -> 112 [style=dashed label="range"]
  241 [label="State 241\n\l101 iterative_statement: FOR iterator IN expression compound_statement •\l"]
  241 -> "241R101" [style=solid]
 "241R101" [label="R101", fillcolor=3, shape=diamond, style=filled]
  242 [label="State 242\n\l 95 list_initialiser: LBRACE list_member initialiser_member_list_tail • RBRACE\l"]
  242 -> 276 [style=solid label="RBRACE"]
  243 [label="State 243\n\l 96 initialiser_member_list_tail: COMMA list_member • initialiser_member_list_tail\l"]
  243 -> 200 [style=solid label="COMMA"]
  243 -> 277 [style=dashed label="initialiser_member_list_tail"]
  243 -> "243R97" [style=solid]
 "243R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
  244 [label="State 244\n\l 18 dims: dims LBRACKET expression RBRACKET •\l"]
  244 -> "244R18" [style=solid]
 "244R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  245 [label="State 245\n\l 20 initializer_dims: LBRACKET expression COMMA • expression RBRACKET\l"]
  245 -> 2 [style=solid label="MINUS"]
  245 -> 3 [style=solid label="NOT"]
  245 -> 5 [style=solid label="LPAREN"]
  245 -> 19 [style=solid label="TRUE"]
  245 -> 20 [style=solid label="FALSE"]
  245 -> 21 [style=solid label="IDENTIFIER"]
  245 -> 22 [style=solid label="INT_LITERAL"]
  245 -> 23 [style=solid label="FLOAT_LITERAL"]
  245 -> 24 [style=solid label="STRING_LITERAL"]
  245 -> 25 [style=solid label="CHARACTER_LITERAL"]
  245 -> 32 [style=dashed label="array_element"]
  245 -> 278 [style=dashed label="expression"]
  245 -> 38 [style=dashed label="function_call"]
  245 -> 39 [style=dashed label="unary_operator"]
  245 -> 40 [style=dashed label="arithmetic_expression"]
  245 -> 41 [style=dashed label="assignment_expression"]
  245 -> 42 [style=dashed label="unary_expression"]
  245 -> 43 [style=dashed label="comparison_expression"]
  245 -> 44 [style=dashed label="logical_expression"]
  245 -> 51 [style=dashed label="array_literal"]
  245 -> 52 [style=dashed label="literals"]
  245 -> 53 [style=dashed label="value"]
  245 -> 54 [style=dashed label="identifier_chain"]
  246 [label="State 246\n\l 89 declaration: REFERENCE IDENTIFIER ASSIGN IDENTIFIER •\l"]
  246 -> "246R89" [style=solid]
 "246R89" [label="R89", fillcolor=3, shape=diamond, style=filled]
  247 [label="State 247\n\l153 taskgroup_argument: LOG ASSIGN STRING_LITERAL •\l"]
  247 -> "247R153" [style=solid]
 "247R153" [label="R153", fillcolor=3, shape=diamond, style=filled]
  248 [label="State 248\n\l154 taskgroup_argument: NUM_THREADS ASSIGN number •\l"]
  248 -> "248R154" [style=solid]
 "248R154" [label="R154", fillcolor=3, shape=diamond, style=filled]
  249 [label="State 249\n\l149 taskgroup_statement: TASKGROUP IDENTIFIER LPAREN taskgroup_argument_list RPAREN LBRACE • taskgroup_definition RBRACE SEMICOLON\l"]
  249 -> 181 [style=solid label="TASK"]
  249 -> 182 [style=solid label="SUPERVISOR"]
  249 -> 279 [style=dashed label="taskgroup_definition"]
  249 -> 184 [style=dashed label="task_declaration_list"]
  249 -> 185 [style=dashed label="task_declaration"]
  249 -> "249R156" [style=solid]
 "249R156" [label="R156", fillcolor=3, shape=diamond, style=filled]
  250 [label="State 250\n\l151 taskgroup_argument_list: taskgroup_argument COMMA taskgroup_argument •\l"]
  250 -> "250R151" [style=solid]
 "250R151" [label="R151", fillcolor=3, shape=diamond, style=filled]
  251 [label="State 251\n\l160 task_declaration: TASK IDENTIFIER LPAREN • NUM_THREADS ASSIGN number RPAREN LBRACE task_statement_list RBRACE\l"]
  251 -> 280 [style=solid label="NUM_THREADS"]
  252 [label="State 252\n\l159 task_declaration: TASK IDENTIFIER LBRACE • task_statement_list RBRACE\l"]
  252 -> 281 [style=dashed label="task_statement_list"]
  252 -> "252R173" [style=solid]
 "252R173" [label="R173", fillcolor=3, shape=diamond, style=filled]
  253 [label="State 253\n\l161 task_declaration: SUPERVISOR IDENTIFIER LBRACE • supervisor_statement_list RBRACE\l"]
  253 -> 282 [style=dashed label="supervisor_statement_list"]
  253 -> "253R163" [style=solid]
 "253R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
  254 [label="State 254\n\l150 taskgroup_statement: TASKGROUP IDENTIFIER LBRACE taskgroup_definition RBRACE SEMICOLON •\l"]
  254 -> "254R150" [style=solid]
 "254R150" [label="R150", fillcolor=3, shape=diamond, style=filled]
  255 [label="State 255\n\l181 properties_declaration: PROPERTIES LBRACE • taskgroup_properties RBRACE\l"]
  255 -> 283 [style=dashed label="taskgroup_properties"]
  255 -> "255R184" [style=solid]
 "255R184" [label="R184", fillcolor=3, shape=diamond, style=filled]
  256 [label="State 256\n\l199 identifier_list: IDENTIFIER •\l"]
  256 -> "256R199" [style=solid]
 "256R199" [label="R199", fillcolor=3, shape=diamond, style=filled]
  257 [label="State 257\n\l128 parallel_stmt_argument: PRIVATE ASSIGN LBRACKET identifier_list • RBRACKET\l198 identifier_list: identifier_list • COMMA IDENTIFIER\l"]
  257 -> 284 [style=solid label="RBRACKET"]
  257 -> 285 [style=solid label="COMMA"]
  258 [label="State 258\n\l127 parallel_stmt_argument: SHARED ASSIGN LBRACKET identifier_list • RBRACKET\l198 identifier_list: identifier_list • COMMA IDENTIFIER\l"]
  258 -> 286 [style=solid label="RBRACKET"]
  258 -> 285 [style=solid label="COMMA"]
  259 [label="State 259\n\l136 reduction_operator_list: PLUS • COLON identifier_list\l"]
  259 -> 287 [style=solid label="COLON"]
  260 [label="State 260\n\l137 reduction_operator_list: MINUS • COLON identifier_list\l"]
  260 -> 288 [style=solid label="COLON"]
  261 [label="State 261\n\l138 reduction_operator_list: MUL • COLON identifier_list\l"]
  261 -> 289 [style=solid label="COLON"]
  262 [label="State 262\n\l139 reduction_operator_list: DIV • COLON identifier_list\l"]
  262 -> 290 [style=solid label="COLON"]
  263 [label="State 263\n\l140 reduction_operator_list: MOD • COLON identifier_list\l"]
  263 -> 291 [style=solid label="COLON"]
  264 [label="State 264\n\l129 parallel_stmt_argument: REDUCTION ASSIGN LBRACKET reduction_list • RBRACKET\l134 reduction_list: reduction_list • SEMICOLON reduction_operator_list\l"]
  264 -> 292 [style=solid label="SEMICOLON"]
  264 -> 293 [style=solid label="RBRACKET"]
  265 [label="State 265\n\l135 reduction_list: reduction_operator_list •\l"]
  265 -> "265R135" [style=solid]
 "265R135" [label="R135", fillcolor=3, shape=diamond, style=filled]
  266 [label="State 266\n\l 16 array: generic_dtypes dims • initializer_dims\l 18 dims: dims • LBRACKET expression RBRACKET\l116 parameter_dtype: generic_dtypes dims •\l"]
  266 -> 148 [style=solid label="LBRACKET"]
  266 -> 149 [style=dashed label="initializer_dims"]
  266 -> "266R21" [style=solid]
 "266R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  266 -> "266R116" [label="[IDENTIFIER]", style=solid]
 "266R116" [label="R116", fillcolor=3, shape=diamond, style=filled]
  267 [label="State 267\n\l114 datatype_and_ref: dtype REFERENCE •\l"]
  267 -> "267R114" [style=solid]
 "267R114" [label="R114", fillcolor=3, shape=diamond, style=filled]
  268 [label="State 268\n\l120 parameter_declaration: datatype_and_ref IDENTIFIER •\l121                      | datatype_and_ref IDENTIFIER • ASSIGN expression\l"]
  268 -> 294 [style=solid label="ASSIGN"]
  268 -> "268R120" [style=solid]
 "268R120" [label="R120", fillcolor=3, shape=diamond, style=filled]
  269 [label="State 269\n\l112 function_declaration: FUNC IDENTIFIER dtype LPAREN parameter_list RPAREN • compound_statement\l"]
  269 -> 6 [style=solid label="LBRACE"]
  269 -> 295 [style=dashed label="compound_statement"]
  270 [label="State 270\n\l117 parameter_list: parameter_list COMMA • parameter_declaration\l"]
  270 -> 1 [style=dotted]
  270 -> 9 [style=solid label="INT"]
  270 -> 10 [style=solid label="CHAR"]
  270 -> 11 [style=solid label="LONG"]
  270 -> 12 [style=solid label="BOOL"]
  270 -> 13 [style=solid label="FLOAT"]
  270 -> 14 [style=solid label="STRING"]
  270 -> 59 [style=solid label="STRUCT"]
  270 -> 230 [style=dashed label="generic_dtypes"]
  270 -> 231 [style=dashed label="dtype"]
  270 -> 31 [style=dashed label="array"]
  270 -> 232 [style=dashed label="datatype_and_ref"]
  270 -> 233 [style=dashed label="parameter_dtype"]
  270 -> 296 [style=dashed label="parameter_declaration"]
  271 [label="State 271\n\l 46 struct_declaration: STRUCT IDENTIFIER LBRACE member_data_list RBRACE SEMICOLON •\l"]
  271 -> "271R46" [style=solid]
 "271R46" [label="R46", fillcolor=3, shape=diamond, style=filled]
  272 [label="State 272\n\l 49 member_data: dtype IDENTIFIER • value_assign SEMICOLON\l"]
  272 -> 151 [style=solid label="ASSIGN"]
  272 -> 297 [style=dashed label="value_assign"]
  272 -> "272R92" [style=solid]
 "272R92" [label="R92", fillcolor=3, shape=diamond, style=filled]
  273 [label="State 273\n\l109 selection_statement: IF LPAREN expression RPAREN compound_statement ELSE • compound_statement\l110 if_chain_statement: ELSE • selection_statement\l"]
  273 -> 6 [style=solid label="LBRACE"]
  273 -> 17 [style=solid label="IF"]
  273 -> 298 [style=dashed label="compound_statement"]
  273 -> 299 [style=dashed label="selection_statement"]
  274 [label="State 274\n\l108 selection_statement: IF LPAREN expression RPAREN compound_statement if_chain_statement •\l"]
  274 -> "274R108" [style=solid]
 "274R108" [label="R108", fillcolor=3, shape=diamond, style=filled]
  275 [label="State 275\n\l100 iterative_statement: FOR LPAREN expression_statement expression_statement expression RPAREN • compound_statement\l"]
  275 -> 6 [style=solid label="LBRACE"]
  275 -> 300 [style=dashed label="compound_statement"]
  276 [label="State 276\n\l 95 list_initialiser: LBRACE list_member initialiser_member_list_tail RBRACE •\l"]
  276 -> "276R95" [style=solid]
 "276R95" [label="R95", fillcolor=3, shape=diamond, style=filled]
  277 [label="State 277\n\l 96 initialiser_member_list_tail: COMMA list_member initialiser_member_list_tail •\l"]
  277 -> "277R96" [style=solid]
 "277R96" [label="R96", fillcolor=3, shape=diamond, style=filled]
  278 [label="State 278\n\l 20 initializer_dims: LBRACKET expression COMMA expression • RBRACKET\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l217 array_literal: expression • range expression\l"]
  278 -> 90 [style=solid label="ASSIGN"]
  278 -> 91 [style=solid label="PLUS"]
  278 -> 92 [style=solid label="MINUS"]
  278 -> 93 [style=solid label="MUL"]
  278 -> 94 [style=solid label="DIV"]
  278 -> 95 [style=solid label="MOD"]
  278 -> 96 [style=solid label="EQ"]
  278 -> 97 [style=solid label="NEQ"]
  278 -> 98 [style=solid label="GT"]
  278 -> 99 [style=solid label="LT"]
  278 -> 100 [style=solid label="GTE"]
  278 -> 101 [style=solid label="LTE"]
  278 -> 102 [style=solid label="AND"]
  278 -> 103 [style=solid label="OR"]
  278 -> 104 [style=solid label="ADD_ASSIGN"]
  278 -> 105 [style=solid label="SUB_ASSIGN"]
  278 -> 106 [style=solid label="MUL_ASSIGN"]
  278 -> 107 [style=solid label="DIV_ASSIGN"]
  278 -> 108 [style=solid label="MOD_ASSIGN"]
  278 -> 301 [style=solid label="RBRACKET"]
  278 -> 110 [style=solid label="RANGE"]
  278 -> 111 [style=solid label="RANGE_INCL"]
  278 -> 112 [style=dashed label="range"]
  279 [label="State 279\n\l149 taskgroup_statement: TASKGROUP IDENTIFIER LPAREN taskgroup_argument_list RPAREN LBRACE taskgroup_definition • RBRACE SEMICOLON\l"]
  279 -> 302 [style=solid label="RBRACE"]
  280 [label="State 280\n\l160 task_declaration: TASK IDENTIFIER LPAREN NUM_THREADS • ASSIGN number RPAREN LBRACE task_statement_list RBRACE\l"]
  280 -> 303 [style=solid label="ASSIGN"]
  281 [label="State 281\n\l159 task_declaration: TASK IDENTIFIER LBRACE task_statement_list • RBRACE\l172 task_statement_list: task_statement_list • task_statements\l"]
  281 -> 1 [style=dotted]
  281 -> 2 [style=solid label="MINUS"]
  281 -> 3 [style=solid label="NOT"]
  281 -> 4 [style=solid label="SEMICOLON"]
  281 -> 5 [style=solid label="LPAREN"]
  281 -> 6 [style=solid label="LBRACE"]
  281 -> 304 [style=solid label="RBRACE"]
  281 -> 305 [style=solid label="CHANNEL_WAIT"]
  281 -> 306 [style=solid label="TASK_CHANNEL"]
  281 -> 8 [style=solid label="PARALLEL"]
  281 -> 9 [style=solid label="INT"]
  281 -> 10 [style=solid label="CHAR"]
  281 -> 11 [style=solid label="LONG"]
  281 -> 12 [style=solid label="BOOL"]
  281 -> 13 [style=solid label="FLOAT"]
  281 -> 14 [style=solid label="STRING"]
  281 -> 59 [style=solid label="STRUCT"]
  281 -> 17 [style=solid label="IF"]
  281 -> 18 [style=solid label="FOR"]
  281 -> 19 [style=solid label="TRUE"]
  281 -> 20 [style=solid label="FALSE"]
  281 -> 21 [style=solid label="IDENTIFIER"]
  281 -> 22 [style=solid label="INT_LITERAL"]
  281 -> 23 [style=solid label="FLOAT_LITERAL"]
  281 -> 24 [style=solid label="STRING_LITERAL"]
  281 -> 25 [style=solid label="CHARACTER_LITERAL"]
  281 -> 29 [style=dashed label="generic_dtypes"]
  281 -> 30 [style=dashed label="dtype"]
  281 -> 31 [style=dashed label="array"]
  281 -> 32 [style=dashed label="array_element"]
  281 -> 307 [style=dashed label="compound_statement"]
  281 -> 308 [style=dashed label="expression_statement"]
  281 -> 37 [style=dashed label="expression"]
  281 -> 38 [style=dashed label="function_call"]
  281 -> 39 [style=dashed label="unary_operator"]
  281 -> 40 [style=dashed label="arithmetic_expression"]
  281 -> 41 [style=dashed label="assignment_expression"]
  281 -> 42 [style=dashed label="unary_expression"]
  281 -> 43 [style=dashed label="comparison_expression"]
  281 -> 44 [style=dashed label="logical_expression"]
  281 -> 309 [style=dashed label="declaration_statement"]
  281 -> 310 [style=dashed label="iterative_statement"]
  281 -> 311 [style=dashed label="selection_statement"]
  281 -> 312 [style=dashed label="parallel_statement"]
  281 -> 313 [style=dashed label="channel_statement"]
  281 -> 314 [style=dashed label="signal_statement"]
  281 -> 315 [style=dashed label="wait_statement"]
  281 -> 316 [style=dashed label="task_statements"]
  281 -> 51 [style=dashed label="array_literal"]
  281 -> 52 [style=dashed label="literals"]
  281 -> 53 [style=dashed label="value"]
  281 -> 54 [style=dashed label="identifier_chain"]
  282 [label="State 282\n\l161 task_declaration: SUPERVISOR IDENTIFIER LBRACE supervisor_statement_list • RBRACE\l162 supervisor_statement_list: supervisor_statement_list • supervisor_statements\l"]
  282 -> 1 [style=dotted]
  282 -> 2 [style=solid label="MINUS"]
  282 -> 3 [style=solid label="NOT"]
  282 -> 4 [style=solid label="SEMICOLON"]
  282 -> 5 [style=solid label="LPAREN"]
  282 -> 6 [style=solid label="LBRACE"]
  282 -> 317 [style=solid label="RBRACE"]
  282 -> 318 [style=solid label="JOIN"]
  282 -> 319 [style=solid label="CALL"]
  282 -> 305 [style=solid label="CHANNEL_WAIT"]
  282 -> 306 [style=solid label="TASK_CHANNEL"]
  282 -> 8 [style=solid label="PARALLEL"]
  282 -> 9 [style=solid label="INT"]
  282 -> 10 [style=solid label="CHAR"]
  282 -> 11 [style=solid label="LONG"]
  282 -> 12 [style=solid label="BOOL"]
  282 -> 13 [style=solid label="FLOAT"]
  282 -> 14 [style=solid label="STRING"]
  282 -> 59 [style=solid label="STRUCT"]
  282 -> 17 [style=solid label="IF"]
  282 -> 18 [style=solid label="FOR"]
  282 -> 19 [style=solid label="TRUE"]
  282 -> 20 [style=solid label="FALSE"]
  282 -> 21 [style=solid label="IDENTIFIER"]
  282 -> 22 [style=solid label="INT_LITERAL"]
  282 -> 23 [style=solid label="FLOAT_LITERAL"]
  282 -> 24 [style=solid label="STRING_LITERAL"]
  282 -> 25 [style=solid label="CHARACTER_LITERAL"]
  282 -> 29 [style=dashed label="generic_dtypes"]
  282 -> 30 [style=dashed label="dtype"]
  282 -> 31 [style=dashed label="array"]
  282 -> 32 [style=dashed label="array_element"]
  282 -> 320 [style=dashed label="compound_statement"]
  282 -> 321 [style=dashed label="expression_statement"]
  282 -> 37 [style=dashed label="expression"]
  282 -> 38 [style=dashed label="function_call"]
  282 -> 39 [style=dashed label="unary_operator"]
  282 -> 40 [style=dashed label="arithmetic_expression"]
  282 -> 41 [style=dashed label="assignment_expression"]
  282 -> 42 [style=dashed label="unary_expression"]
  282 -> 43 [style=dashed label="comparison_expression"]
  282 -> 44 [style=dashed label="logical_expression"]
  282 -> 322 [style=dashed label="declaration_statement"]
  282 -> 323 [style=dashed label="iterative_statement"]
  282 -> 324 [style=dashed label="selection_statement"]
  282 -> 325 [style=dashed label="parallel_statement"]
  282 -> 326 [style=dashed label="channel_statement"]
  282 -> 314 [style=dashed label="signal_statement"]
  282 -> 315 [style=dashed label="wait_statement"]
  282 -> 327 [style=dashed label="supervisor_statements"]
  282 -> 328 [style=dashed label="other_statements"]
  282 -> 329 [style=dashed label="join_statement"]
  282 -> 330 [style=dashed label="call_statement"]
  282 -> 51 [style=dashed label="array_literal"]
  282 -> 52 [style=dashed label="literals"]
  282 -> 53 [style=dashed label="value"]
  282 -> 54 [style=dashed label="identifier_chain"]
  283 [label="State 283\n\l181 properties_declaration: PROPERTIES LBRACE taskgroup_properties • RBRACE\l183 taskgroup_properties: taskgroup_properties • taskgroup_property\l"]
  283 -> 331 [style=solid label="RBRACE"]
  283 -> 332 [style=solid label="ORDER"]
  283 -> 333 [style=solid label="MEM"]
  283 -> 334 [style=solid label="SHARED_DIRECTIVE"]
  283 -> 335 [style=dashed label="taskgroup_property"]
  283 -> 336 [style=dashed label="order_block"]
  283 -> 337 [style=dashed label="shared_block"]
  283 -> 338 [style=dashed label="mem_block"]
  284 [label="State 284\n\l128 parallel_stmt_argument: PRIVATE ASSIGN LBRACKET identifier_list RBRACKET •\l"]
  284 -> "284R128" [style=solid]
 "284R128" [label="R128", fillcolor=3, shape=diamond, style=filled]
  285 [label="State 285\n\l198 identifier_list: identifier_list COMMA • IDENTIFIER\l"]
  285 -> 339 [style=solid label="IDENTIFIER"]
  286 [label="State 286\n\l127 parallel_stmt_argument: SHARED ASSIGN LBRACKET identifier_list RBRACKET •\l"]
  286 -> "286R127" [style=solid]
 "286R127" [label="R127", fillcolor=3, shape=diamond, style=filled]
  287 [label="State 287\n\l136 reduction_operator_list: PLUS COLON • identifier_list\l"]
  287 -> 256 [style=solid label="IDENTIFIER"]
  287 -> 340 [style=dashed label="identifier_list"]
  288 [label="State 288\n\l137 reduction_operator_list: MINUS COLON • identifier_list\l"]
  288 -> 256 [style=solid label="IDENTIFIER"]
  288 -> 341 [style=dashed label="identifier_list"]
  289 [label="State 289\n\l138 reduction_operator_list: MUL COLON • identifier_list\l"]
  289 -> 256 [style=solid label="IDENTIFIER"]
  289 -> 342 [style=dashed label="identifier_list"]
  290 [label="State 290\n\l139 reduction_operator_list: DIV COLON • identifier_list\l"]
  290 -> 256 [style=solid label="IDENTIFIER"]
  290 -> 343 [style=dashed label="identifier_list"]
  291 [label="State 291\n\l140 reduction_operator_list: MOD COLON • identifier_list\l"]
  291 -> 256 [style=solid label="IDENTIFIER"]
  291 -> 344 [style=dashed label="identifier_list"]
  292 [label="State 292\n\l134 reduction_list: reduction_list SEMICOLON • reduction_operator_list\l"]
  292 -> 259 [style=solid label="PLUS"]
  292 -> 260 [style=solid label="MINUS"]
  292 -> 261 [style=solid label="MUL"]
  292 -> 262 [style=solid label="DIV"]
  292 -> 263 [style=solid label="MOD"]
  292 -> 345 [style=dashed label="reduction_operator_list"]
  293 [label="State 293\n\l129 parallel_stmt_argument: REDUCTION ASSIGN LBRACKET reduction_list RBRACKET •\l"]
  293 -> "293R129" [style=solid]
 "293R129" [label="R129", fillcolor=3, shape=diamond, style=filled]
  294 [label="State 294\n\l121 parameter_declaration: datatype_and_ref IDENTIFIER ASSIGN • expression\l"]
  294 -> 2 [style=solid label="MINUS"]
  294 -> 3 [style=solid label="NOT"]
  294 -> 5 [style=solid label="LPAREN"]
  294 -> 19 [style=solid label="TRUE"]
  294 -> 20 [style=solid label="FALSE"]
  294 -> 21 [style=solid label="IDENTIFIER"]
  294 -> 22 [style=solid label="INT_LITERAL"]
  294 -> 23 [style=solid label="FLOAT_LITERAL"]
  294 -> 24 [style=solid label="STRING_LITERAL"]
  294 -> 25 [style=solid label="CHARACTER_LITERAL"]
  294 -> 32 [style=dashed label="array_element"]
  294 -> 346 [style=dashed label="expression"]
  294 -> 38 [style=dashed label="function_call"]
  294 -> 39 [style=dashed label="unary_operator"]
  294 -> 40 [style=dashed label="arithmetic_expression"]
  294 -> 41 [style=dashed label="assignment_expression"]
  294 -> 42 [style=dashed label="unary_expression"]
  294 -> 43 [style=dashed label="comparison_expression"]
  294 -> 44 [style=dashed label="logical_expression"]
  294 -> 51 [style=dashed label="array_literal"]
  294 -> 52 [style=dashed label="literals"]
  294 -> 53 [style=dashed label="value"]
  294 -> 54 [style=dashed label="identifier_chain"]
  295 [label="State 295\n\l112 function_declaration: FUNC IDENTIFIER dtype LPAREN parameter_list RPAREN compound_statement •\l"]
  295 -> "295R112" [style=solid]
 "295R112" [label="R112", fillcolor=3, shape=diamond, style=filled]
  296 [label="State 296\n\l117 parameter_list: parameter_list COMMA parameter_declaration •\l"]
  296 -> "296R117" [style=solid]
 "296R117" [label="R117", fillcolor=3, shape=diamond, style=filled]
  297 [label="State 297\n\l 49 member_data: dtype IDENTIFIER value_assign • SEMICOLON\l"]
  297 -> 347 [style=solid label="SEMICOLON"]
  298 [label="State 298\n\l109 selection_statement: IF LPAREN expression RPAREN compound_statement ELSE compound_statement •\l"]
  298 -> "298R109" [style=solid]
 "298R109" [label="R109", fillcolor=3, shape=diamond, style=filled]
  299 [label="State 299\n\l110 if_chain_statement: ELSE selection_statement •\l"]
  299 -> "299R110" [style=solid]
 "299R110" [label="R110", fillcolor=3, shape=diamond, style=filled]
  300 [label="State 300\n\l100 iterative_statement: FOR LPAREN expression_statement expression_statement expression RPAREN compound_statement •\l"]
  300 -> "300R100" [style=solid]
 "300R100" [label="R100", fillcolor=3, shape=diamond, style=filled]
  301 [label="State 301\n\l 20 initializer_dims: LBRACKET expression COMMA expression RBRACKET •\l"]
  301 -> "301R20" [style=solid]
 "301R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
  302 [label="State 302\n\l149 taskgroup_statement: TASKGROUP IDENTIFIER LPAREN taskgroup_argument_list RPAREN LBRACE taskgroup_definition RBRACE • SEMICOLON\l"]
  302 -> 348 [style=solid label="SEMICOLON"]
  303 [label="State 303\n\l160 task_declaration: TASK IDENTIFIER LPAREN NUM_THREADS ASSIGN • number RPAREN LBRACE task_statement_list RBRACE\l"]
  303 -> 113 [style=solid label="IDENTIFIER"]
  303 -> 114 [style=solid label="INT_LITERAL"]
  303 -> 349 [style=dashed label="number"]
  304 [label="State 304\n\l159 task_declaration: TASK IDENTIFIER LBRACE task_statement_list RBRACE •\l"]
  304 -> "304R159" [style=solid]
 "304R159" [label="R159", fillcolor=3, shape=diamond, style=filled]
  305 [label="State 305\n\l147 wait_statement: CHANNEL_WAIT • LBRACE IDENTIFIER COMMA expression RBRACE\l148               | CHANNEL_WAIT • LBRACE IDENTIFIER COMMA expression RBRACE ARROW IDENTIFIER\l"]
  305 -> 350 [style=solid label="LBRACE"]
  306 [label="State 306\n\l143 signal_statement: TASK_CHANNEL • task_all CHN_SEND expression\l144                 | TASK_CHANNEL • task_all\l"]
  306 -> 351 [style=solid label="LPAREN"]
  306 -> 352 [style=dashed label="task_all"]
  306 -> "306R146" [style=solid]
 "306R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  307 [label="State 307\n\l177 task_statements: compound_statement •\l"]
  307 -> "307R177" [style=solid]
 "307R177" [label="R177", fillcolor=3, shape=diamond, style=filled]
  308 [label="State 308\n\l176 task_statements: expression_statement •\l"]
  308 -> "308R176" [style=solid]
 "308R176" [label="R176", fillcolor=3, shape=diamond, style=filled]
  309 [label="State 309\n\l178 task_statements: declaration_statement •\l"]
  309 -> "309R178" [style=solid]
 "309R178" [label="R178", fillcolor=3, shape=diamond, style=filled]
  310 [label="State 310\n\l174 task_statements: iterative_statement •\l"]
  310 -> "310R174" [style=solid]
 "310R174" [label="R174", fillcolor=3, shape=diamond, style=filled]
  311 [label="State 311\n\l175 task_statements: selection_statement •\l"]
  311 -> "311R175" [style=solid]
 "311R175" [label="R175", fillcolor=3, shape=diamond, style=filled]
  312 [label="State 312\n\l179 task_statements: parallel_statement •\l"]
  312 -> "312R179" [style=solid]
 "312R179" [label="R179", fillcolor=3, shape=diamond, style=filled]
  313 [label="State 313\n\l180 task_statements: channel_statement •\l"]
  313 -> "313R180" [style=solid]
 "313R180" [label="R180", fillcolor=3, shape=diamond, style=filled]
  314 [label="State 314\n\l141 channel_statement: signal_statement • SEMICOLON\l"]
  314 -> 353 [style=solid label="SEMICOLON"]
  315 [label="State 315\n\l142 channel_statement: wait_statement • SEMICOLON\l"]
  315 -> 354 [style=solid label="SEMICOLON"]
  316 [label="State 316\n\l172 task_statement_list: task_statement_list task_statements •\l"]
  316 -> "316R172" [style=solid]
 "316R172" [label="R172", fillcolor=3, shape=diamond, style=filled]
  317 [label="State 317\n\l161 task_declaration: SUPERVISOR IDENTIFIER LBRACE supervisor_statement_list RBRACE •\l"]
  317 -> "317R161" [style=solid]
 "317R161" [label="R161", fillcolor=3, shape=diamond, style=filled]
  318 [label="State 318\n\l215 join_statement: JOIN • IDENTIFIER SEMICOLON\l"]
  318 -> 355 [style=solid label="IDENTIFIER"]
  319 [label="State 319\n\l216 call_statement: CALL • IDENTIFIER SEMICOLON\l"]
  319 -> 356 [style=solid label="IDENTIFIER"]
  320 [label="State 320\n\l167 supervisor_statements: compound_statement •\l"]
  320 -> "320R167" [style=solid]
 "320R167" [label="R167", fillcolor=3, shape=diamond, style=filled]
  321 [label="State 321\n\l166 supervisor_statements: expression_statement •\l"]
  321 -> "321R166" [style=solid]
 "321R166" [label="R166", fillcolor=3, shape=diamond, style=filled]
  322 [label="State 322\n\l168 supervisor_statements: declaration_statement •\l"]
  322 -> "322R168" [style=solid]
 "322R168" [label="R168", fillcolor=3, shape=diamond, style=filled]
  323 [label="State 323\n\l164 supervisor_statements: iterative_statement •\l"]
  323 -> "323R164" [style=solid]
 "323R164" [label="R164", fillcolor=3, shape=diamond, style=filled]
  324 [label="State 324\n\l165 supervisor_statements: selection_statement •\l"]
  324 -> "324R165" [style=solid]
 "324R165" [label="R165", fillcolor=3, shape=diamond, style=filled]
  325 [label="State 325\n\l169 supervisor_statements: parallel_statement •\l"]
  325 -> "325R169" [style=solid]
 "325R169" [label="R169", fillcolor=3, shape=diamond, style=filled]
  326 [label="State 326\n\l170 supervisor_statements: channel_statement •\l"]
  326 -> "326R170" [style=solid]
 "326R170" [label="R170", fillcolor=3, shape=diamond, style=filled]
  327 [label="State 327\n\l162 supervisor_statement_list: supervisor_statement_list supervisor_statements •\l"]
  327 -> "327R162" [style=solid]
 "327R162" [label="R162", fillcolor=3, shape=diamond, style=filled]
  328 [label="State 328\n\l171 supervisor_statements: other_statements •\l"]
  328 -> "328R171" [style=solid]
 "328R171" [label="R171", fillcolor=3, shape=diamond, style=filled]
  329 [label="State 329\n\l213 other_statements: join_statement •\l"]
  329 -> "329R213" [style=solid]
 "329R213" [label="R213", fillcolor=3, shape=diamond, style=filled]
  330 [label="State 330\n\l214 other_statements: call_statement •\l"]
  330 -> "330R214" [style=solid]
 "330R214" [label="R214", fillcolor=3, shape=diamond, style=filled]
  331 [label="State 331\n\l181 properties_declaration: PROPERTIES LBRACE taskgroup_properties RBRACE •\l"]
  331 -> "331R181" [style=solid]
 "331R181" [label="R181", fillcolor=3, shape=diamond, style=filled]
  332 [label="State 332\n\l188 order_block: ORDER • LBRACE order_rule_list RBRACE\l"]
  332 -> 357 [style=solid label="LBRACE"]
  333 [label="State 333\n\l204 mem_block: MEM • LBRACE mem_statement_list RBRACE\l205          | MEM • UNSAFE LBRACE mem_statement_list RBRACE\l"]
  333 -> 358 [style=solid label="LBRACE"]
  333 -> 359 [style=solid label="UNSAFE"]
  334 [label="State 334\n\l200 shared_block: SHARED_DIRECTIVE • LBRACE shared_rule_list RBRACE\l"]
  334 -> 360 [style=solid label="LBRACE"]
  335 [label="State 335\n\l183 taskgroup_properties: taskgroup_properties taskgroup_property •\l"]
  335 -> "335R183" [style=solid]
 "335R183" [label="R183", fillcolor=3, shape=diamond, style=filled]
  336 [label="State 336\n\l185 taskgroup_property: order_block •\l"]
  336 -> "336R185" [style=solid]
 "336R185" [label="R185", fillcolor=3, shape=diamond, style=filled]
  337 [label="State 337\n\l186 taskgroup_property: shared_block •\l"]
  337 -> "337R186" [style=solid]
 "337R186" [label="R186", fillcolor=3, shape=diamond, style=filled]
  338 [label="State 338\n\l187 taskgroup_property: mem_block •\l"]
  338 -> "338R187" [style=solid]
 "338R187" [label="R187", fillcolor=3, shape=diamond, style=filled]
  339 [label="State 339\n\l198 identifier_list: identifier_list COMMA IDENTIFIER •\l"]
  339 -> "339R198" [style=solid]
 "339R198" [label="R198", fillcolor=3, shape=diamond, style=filled]
  340 [label="State 340\n\l136 reduction_operator_list: PLUS COLON identifier_list •\l198 identifier_list: identifier_list • COMMA IDENTIFIER\l"]
  340 -> 285 [style=solid label="COMMA"]
  340 -> "340R136" [style=solid]
 "340R136" [label="R136", fillcolor=3, shape=diamond, style=filled]
  341 [label="State 341\n\l137 reduction_operator_list: MINUS COLON identifier_list •\l198 identifier_list: identifier_list • COMMA IDENTIFIER\l"]
  341 -> 285 [style=solid label="COMMA"]
  341 -> "341R137" [style=solid]
 "341R137" [label="R137", fillcolor=3, shape=diamond, style=filled]
  342 [label="State 342\n\l138 reduction_operator_list: MUL COLON identifier_list •\l198 identifier_list: identifier_list • COMMA IDENTIFIER\l"]
  342 -> 285 [style=solid label="COMMA"]
  342 -> "342R138" [style=solid]
 "342R138" [label="R138", fillcolor=3, shape=diamond, style=filled]
  343 [label="State 343\n\l139 reduction_operator_list: DIV COLON identifier_list •\l198 identifier_list: identifier_list • COMMA IDENTIFIER\l"]
  343 -> 285 [style=solid label="COMMA"]
  343 -> "343R139" [style=solid]
 "343R139" [label="R139", fillcolor=3, shape=diamond, style=filled]
  344 [label="State 344\n\l140 reduction_operator_list: MOD COLON identifier_list •\l198 identifier_list: identifier_list • COMMA IDENTIFIER\l"]
  344 -> 285 [style=solid label="COMMA"]
  344 -> "344R140" [style=solid]
 "344R140" [label="R140", fillcolor=3, shape=diamond, style=filled]
  345 [label="State 345\n\l134 reduction_list: reduction_list SEMICOLON reduction_operator_list •\l"]
  345 -> "345R134" [style=solid]
 "345R134" [label="R134", fillcolor=3, shape=diamond, style=filled]
  346 [label="State 346\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l121 parameter_declaration: datatype_and_ref IDENTIFIER ASSIGN expression •\l217 array_literal: expression • range expression\l"]
  346 -> 90 [style=solid label="ASSIGN"]
  346 -> 91 [style=solid label="PLUS"]
  346 -> 92 [style=solid label="MINUS"]
  346 -> 93 [style=solid label="MUL"]
  346 -> 94 [style=solid label="DIV"]
  346 -> 95 [style=solid label="MOD"]
  346 -> 96 [style=solid label="EQ"]
  346 -> 97 [style=solid label="NEQ"]
  346 -> 98 [style=solid label="GT"]
  346 -> 99 [style=solid label="LT"]
  346 -> 100 [style=solid label="GTE"]
  346 -> 101 [style=solid label="LTE"]
  346 -> 102 [style=solid label="AND"]
  346 -> 103 [style=solid label="OR"]
  346 -> 104 [style=solid label="ADD_ASSIGN"]
  346 -> 105 [style=solid label="SUB_ASSIGN"]
  346 -> 106 [style=solid label="MUL_ASSIGN"]
  346 -> 107 [style=solid label="DIV_ASSIGN"]
  346 -> 108 [style=solid label="MOD_ASSIGN"]
  346 -> 110 [style=solid label="RANGE"]
  346 -> 111 [style=solid label="RANGE_INCL"]
  346 -> 112 [style=dashed label="range"]
  346 -> "346R121" [style=solid]
 "346R121" [label="R121", fillcolor=3, shape=diamond, style=filled]
  347 [label="State 347\n\l 49 member_data: dtype IDENTIFIER value_assign SEMICOLON •\l"]
  347 -> "347R49" [style=solid]
 "347R49" [label="R49", fillcolor=3, shape=diamond, style=filled]
  348 [label="State 348\n\l149 taskgroup_statement: TASKGROUP IDENTIFIER LPAREN taskgroup_argument_list RPAREN LBRACE taskgroup_definition RBRACE SEMICOLON •\l"]
  348 -> "348R149" [style=solid]
 "348R149" [label="R149", fillcolor=3, shape=diamond, style=filled]
  349 [label="State 349\n\l160 task_declaration: TASK IDENTIFIER LPAREN NUM_THREADS ASSIGN number • RPAREN LBRACE task_statement_list RBRACE\l"]
  349 -> 361 [style=solid label="RPAREN"]
  350 [label="State 350\n\l147 wait_statement: CHANNEL_WAIT LBRACE • IDENTIFIER COMMA expression RBRACE\l148               | CHANNEL_WAIT LBRACE • IDENTIFIER COMMA expression RBRACE ARROW IDENTIFIER\l"]
  350 -> 362 [style=solid label="IDENTIFIER"]
  351 [label="State 351\n\l145 task_all: LPAREN • ALL RPAREN\l"]
  351 -> 363 [style=solid label="ALL"]
  352 [label="State 352\n\l143 signal_statement: TASK_CHANNEL task_all • CHN_SEND expression\l144                 | TASK_CHANNEL task_all •\l"]
  352 -> 364 [style=solid label="CHN_SEND"]
  352 -> "352R144" [style=solid]
 "352R144" [label="R144", fillcolor=3, shape=diamond, style=filled]
  353 [label="State 353\n\l141 channel_statement: signal_statement SEMICOLON •\l"]
  353 -> "353R141" [style=solid]
 "353R141" [label="R141", fillcolor=3, shape=diamond, style=filled]
  354 [label="State 354\n\l142 channel_statement: wait_statement SEMICOLON •\l"]
  354 -> "354R142" [style=solid]
 "354R142" [label="R142", fillcolor=3, shape=diamond, style=filled]
  355 [label="State 355\n\l215 join_statement: JOIN IDENTIFIER • SEMICOLON\l"]
  355 -> 365 [style=solid label="SEMICOLON"]
  356 [label="State 356\n\l216 call_statement: CALL IDENTIFIER • SEMICOLON\l"]
  356 -> 366 [style=solid label="SEMICOLON"]
  357 [label="State 357\n\l188 order_block: ORDER LBRACE • order_rule_list RBRACE\l"]
  357 -> 367 [style=dashed label="order_rule_list"]
  357 -> "357R190" [style=solid]
 "357R190" [label="R190", fillcolor=3, shape=diamond, style=filled]
  358 [label="State 358\n\l204 mem_block: MEM LBRACE • mem_statement_list RBRACE\l"]
  358 -> 368 [style=dashed label="mem_statement_list"]
  358 -> "358R207" [style=solid]
 "358R207" [label="R207", fillcolor=3, shape=diamond, style=filled]
  359 [label="State 359\n\l205 mem_block: MEM UNSAFE • LBRACE mem_statement_list RBRACE\l"]
  359 -> 369 [style=solid label="LBRACE"]
  360 [label="State 360\n\l200 shared_block: SHARED_DIRECTIVE LBRACE • shared_rule_list RBRACE\l"]
  360 -> 370 [style=dashed label="shared_rule_list"]
  360 -> "360R202" [style=solid]
 "360R202" [label="R202", fillcolor=3, shape=diamond, style=filled]
  361 [label="State 361\n\l160 task_declaration: TASK IDENTIFIER LPAREN NUM_THREADS ASSIGN number RPAREN • LBRACE task_statement_list RBRACE\l"]
  361 -> 371 [style=solid label="LBRACE"]
  362 [label="State 362\n\l147 wait_statement: CHANNEL_WAIT LBRACE IDENTIFIER • COMMA expression RBRACE\l148               | CHANNEL_WAIT LBRACE IDENTIFIER • COMMA expression RBRACE ARROW IDENTIFIER\l"]
  362 -> 372 [style=solid label="COMMA"]
  363 [label="State 363\n\l145 task_all: LPAREN ALL • RPAREN\l"]
  363 -> 373 [style=solid label="RPAREN"]
  364 [label="State 364\n\l143 signal_statement: TASK_CHANNEL task_all CHN_SEND • expression\l"]
  364 -> 2 [style=solid label="MINUS"]
  364 -> 3 [style=solid label="NOT"]
  364 -> 5 [style=solid label="LPAREN"]
  364 -> 19 [style=solid label="TRUE"]
  364 -> 20 [style=solid label="FALSE"]
  364 -> 21 [style=solid label="IDENTIFIER"]
  364 -> 22 [style=solid label="INT_LITERAL"]
  364 -> 23 [style=solid label="FLOAT_LITERAL"]
  364 -> 24 [style=solid label="STRING_LITERAL"]
  364 -> 25 [style=solid label="CHARACTER_LITERAL"]
  364 -> 32 [style=dashed label="array_element"]
  364 -> 374 [style=dashed label="expression"]
  364 -> 38 [style=dashed label="function_call"]
  364 -> 39 [style=dashed label="unary_operator"]
  364 -> 40 [style=dashed label="arithmetic_expression"]
  364 -> 41 [style=dashed label="assignment_expression"]
  364 -> 42 [style=dashed label="unary_expression"]
  364 -> 43 [style=dashed label="comparison_expression"]
  364 -> 44 [style=dashed label="logical_expression"]
  364 -> 51 [style=dashed label="array_literal"]
  364 -> 52 [style=dashed label="literals"]
  364 -> 53 [style=dashed label="value"]
  364 -> 54 [style=dashed label="identifier_chain"]
  365 [label="State 365\n\l215 join_statement: JOIN IDENTIFIER SEMICOLON •\l"]
  365 -> "365R215" [style=solid]
 "365R215" [label="R215", fillcolor=3, shape=diamond, style=filled]
  366 [label="State 366\n\l216 call_statement: CALL IDENTIFIER SEMICOLON •\l"]
  366 -> "366R216" [style=solid]
 "366R216" [label="R216", fillcolor=3, shape=diamond, style=filled]
  367 [label="State 367\n\l188 order_block: ORDER LBRACE order_rule_list • RBRACE\l189 order_rule_list: order_rule_list • order_rule\l"]
  367 -> 375 [style=solid label="RBRACE"]
  367 -> 376 [style=solid label="ALL"]
  367 -> 377 [style=dashed label="order_rule"]
  367 -> 378 [style=dashed label="order_rule_start"]
  367 -> "367R193" [style=solid]
 "367R193" [label="R193", fillcolor=3, shape=diamond, style=filled]
  368 [label="State 368\n\l204 mem_block: MEM LBRACE mem_statement_list • RBRACE\l206 mem_statement_list: mem_statement_list • mem_statement\l"]
  368 -> 379 [style=solid label="RBRACE"]
  368 -> 256 [style=solid label="IDENTIFIER"]
  368 -> 380 [style=dashed label="identifier_list"]
  368 -> 381 [style=dashed label="mem_statement"]
  369 [label="State 369\n\l205 mem_block: MEM UNSAFE LBRACE • mem_statement_list RBRACE\l"]
  369 -> 382 [style=dashed label="mem_statement_list"]
  369 -> "369R207" [style=solid]
 "369R207" [label="R207", fillcolor=3, shape=diamond, style=filled]
  370 [label="State 370\n\l200 shared_block: SHARED_DIRECTIVE LBRACE shared_rule_list • RBRACE\l201 shared_rule_list: shared_rule_list • shared_rule\l"]
  370 -> 383 [style=solid label="RBRACE"]
  370 -> 256 [style=solid label="IDENTIFIER"]
  370 -> 384 [style=dashed label="identifier_list"]
  370 -> 385 [style=dashed label="shared_rule"]
  371 [label="State 371\n\l160 task_declaration: TASK IDENTIFIER LPAREN NUM_THREADS ASSIGN number RPAREN LBRACE • task_statement_list RBRACE\l"]
  371 -> 386 [style=dashed label="task_statement_list"]
  371 -> "371R173" [style=solid]
 "371R173" [label="R173", fillcolor=3, shape=diamond, style=filled]
  372 [label="State 372\n\l147 wait_statement: CHANNEL_WAIT LBRACE IDENTIFIER COMMA • expression RBRACE\l148               | CHANNEL_WAIT LBRACE IDENTIFIER COMMA • expression RBRACE ARROW IDENTIFIER\l"]
  372 -> 2 [style=solid label="MINUS"]
  372 -> 3 [style=solid label="NOT"]
  372 -> 5 [style=solid label="LPAREN"]
  372 -> 19 [style=solid label="TRUE"]
  372 -> 20 [style=solid label="FALSE"]
  372 -> 21 [style=solid label="IDENTIFIER"]
  372 -> 22 [style=solid label="INT_LITERAL"]
  372 -> 23 [style=solid label="FLOAT_LITERAL"]
  372 -> 24 [style=solid label="STRING_LITERAL"]
  372 -> 25 [style=solid label="CHARACTER_LITERAL"]
  372 -> 32 [style=dashed label="array_element"]
  372 -> 387 [style=dashed label="expression"]
  372 -> 38 [style=dashed label="function_call"]
  372 -> 39 [style=dashed label="unary_operator"]
  372 -> 40 [style=dashed label="arithmetic_expression"]
  372 -> 41 [style=dashed label="assignment_expression"]
  372 -> 42 [style=dashed label="unary_expression"]
  372 -> 43 [style=dashed label="comparison_expression"]
  372 -> 44 [style=dashed label="logical_expression"]
  372 -> 51 [style=dashed label="array_literal"]
  372 -> 52 [style=dashed label="literals"]
  372 -> 53 [style=dashed label="value"]
  372 -> 54 [style=dashed label="identifier_chain"]
  373 [label="State 373\n\l145 task_all: LPAREN ALL RPAREN •\l"]
  373 -> "373R145" [style=solid]
 "373R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  374 [label="State 374\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l143 signal_statement: TASK_CHANNEL task_all CHN_SEND expression •\l217 array_literal: expression • range expression\l"]
  374 -> 90 [style=solid label="ASSIGN"]
  374 -> 91 [style=solid label="PLUS"]
  374 -> 92 [style=solid label="MINUS"]
  374 -> 93 [style=solid label="MUL"]
  374 -> 94 [style=solid label="DIV"]
  374 -> 95 [style=solid label="MOD"]
  374 -> 96 [style=solid label="EQ"]
  374 -> 97 [style=solid label="NEQ"]
  374 -> 98 [style=solid label="GT"]
  374 -> 99 [style=solid label="LT"]
  374 -> 100 [style=solid label="GTE"]
  374 -> 101 [style=solid label="LTE"]
  374 -> 102 [style=solid label="AND"]
  374 -> 103 [style=solid label="OR"]
  374 -> 104 [style=solid label="ADD_ASSIGN"]
  374 -> 105 [style=solid label="SUB_ASSIGN"]
  374 -> 106 [style=solid label="MUL_ASSIGN"]
  374 -> 107 [style=solid label="DIV_ASSIGN"]
  374 -> 108 [style=solid label="MOD_ASSIGN"]
  374 -> 110 [style=solid label="RANGE"]
  374 -> 111 [style=solid label="RANGE_INCL"]
  374 -> 112 [style=dashed label="range"]
  374 -> "374R143" [style=solid]
 "374R143" [label="R143", fillcolor=3, shape=diamond, style=filled]
  375 [label="State 375\n\l188 order_block: ORDER LBRACE order_rule_list RBRACE •\l"]
  375 -> "375R188" [style=solid]
 "375R188" [label="R188", fillcolor=3, shape=diamond, style=filled]
  376 [label="State 376\n\l192 order_rule_start: ALL • ARROW\l"]
  376 -> 388 [style=solid label="ARROW"]
  377 [label="State 377\n\l189 order_rule_list: order_rule_list order_rule •\l"]
  377 -> "377R189" [style=solid]
 "377R189" [label="R189", fillcolor=3, shape=diamond, style=filled]
  378 [label="State 378\n\l191 order_rule: order_rule_start • order_rule_mid order_rule_end\l"]
  378 -> 256 [style=solid label="IDENTIFIER"]
  378 -> 389 [style=dashed label="order_rule_mid"]
  378 -> 390 [style=dashed label="identifier_list"]
  379 [label="State 379\n\l204 mem_block: MEM LBRACE mem_statement_list RBRACE •\l"]
  379 -> "379R204" [style=solid]
 "379R204" [label="R204", fillcolor=3, shape=diamond, style=filled]
  380 [label="State 380\n\l198 identifier_list: identifier_list • COMMA IDENTIFIER\l208 mem_statement: identifier_list • ARROW mem_taskgroup_list SEMICOLON\l"]
  380 -> 285 [style=solid label="COMMA"]
  380 -> 391 [style=solid label="ARROW"]
  381 [label="State 381\n\l206 mem_statement_list: mem_statement_list mem_statement •\l"]
  381 -> "381R206" [style=solid]
 "381R206" [label="R206", fillcolor=3, shape=diamond, style=filled]
  382 [label="State 382\n\l205 mem_block: MEM UNSAFE LBRACE mem_statement_list • RBRACE\l206 mem_statement_list: mem_statement_list • mem_statement\l"]
  382 -> 392 [style=solid label="RBRACE"]
  382 -> 256 [style=solid label="IDENTIFIER"]
  382 -> 380 [style=dashed label="identifier_list"]
  382 -> 381 [style=dashed label="mem_statement"]
  383 [label="State 383\n\l200 shared_block: SHARED_DIRECTIVE LBRACE shared_rule_list RBRACE •\l"]
  383 -> "383R200" [style=solid]
 "383R200" [label="R200", fillcolor=3, shape=diamond, style=filled]
  384 [label="State 384\n\l198 identifier_list: identifier_list • COMMA IDENTIFIER\l203 shared_rule: identifier_list • COLON dtype ARROW identifier_list SEMICOLON\l"]
  384 -> 393 [style=solid label="COLON"]
  384 -> 285 [style=solid label="COMMA"]
  385 [label="State 385\n\l201 shared_rule_list: shared_rule_list shared_rule •\l"]
  385 -> "385R201" [style=solid]
 "385R201" [label="R201", fillcolor=3, shape=diamond, style=filled]
  386 [label="State 386\n\l160 task_declaration: TASK IDENTIFIER LPAREN NUM_THREADS ASSIGN number RPAREN LBRACE task_statement_list • RBRACE\l172 task_statement_list: task_statement_list • task_statements\l"]
  386 -> 1 [style=dotted]
  386 -> 2 [style=solid label="MINUS"]
  386 -> 3 [style=solid label="NOT"]
  386 -> 4 [style=solid label="SEMICOLON"]
  386 -> 5 [style=solid label="LPAREN"]
  386 -> 6 [style=solid label="LBRACE"]
  386 -> 394 [style=solid label="RBRACE"]
  386 -> 305 [style=solid label="CHANNEL_WAIT"]
  386 -> 306 [style=solid label="TASK_CHANNEL"]
  386 -> 8 [style=solid label="PARALLEL"]
  386 -> 9 [style=solid label="INT"]
  386 -> 10 [style=solid label="CHAR"]
  386 -> 11 [style=solid label="LONG"]
  386 -> 12 [style=solid label="BOOL"]
  386 -> 13 [style=solid label="FLOAT"]
  386 -> 14 [style=solid label="STRING"]
  386 -> 59 [style=solid label="STRUCT"]
  386 -> 17 [style=solid label="IF"]
  386 -> 18 [style=solid label="FOR"]
  386 -> 19 [style=solid label="TRUE"]
  386 -> 20 [style=solid label="FALSE"]
  386 -> 21 [style=solid label="IDENTIFIER"]
  386 -> 22 [style=solid label="INT_LITERAL"]
  386 -> 23 [style=solid label="FLOAT_LITERAL"]
  386 -> 24 [style=solid label="STRING_LITERAL"]
  386 -> 25 [style=solid label="CHARACTER_LITERAL"]
  386 -> 29 [style=dashed label="generic_dtypes"]
  386 -> 30 [style=dashed label="dtype"]
  386 -> 31 [style=dashed label="array"]
  386 -> 32 [style=dashed label="array_element"]
  386 -> 307 [style=dashed label="compound_statement"]
  386 -> 308 [style=dashed label="expression_statement"]
  386 -> 37 [style=dashed label="expression"]
  386 -> 38 [style=dashed label="function_call"]
  386 -> 39 [style=dashed label="unary_operator"]
  386 -> 40 [style=dashed label="arithmetic_expression"]
  386 -> 41 [style=dashed label="assignment_expression"]
  386 -> 42 [style=dashed label="unary_expression"]
  386 -> 43 [style=dashed label="comparison_expression"]
  386 -> 44 [style=dashed label="logical_expression"]
  386 -> 309 [style=dashed label="declaration_statement"]
  386 -> 310 [style=dashed label="iterative_statement"]
  386 -> 311 [style=dashed label="selection_statement"]
  386 -> 312 [style=dashed label="parallel_statement"]
  386 -> 313 [style=dashed label="channel_statement"]
  386 -> 314 [style=dashed label="signal_statement"]
  386 -> 315 [style=dashed label="wait_statement"]
  386 -> 316 [style=dashed label="task_statements"]
  386 -> 51 [style=dashed label="array_literal"]
  386 -> 52 [style=dashed label="literals"]
  386 -> 53 [style=dashed label="value"]
  386 -> 54 [style=dashed label="identifier_chain"]
  387 [label="State 387\n\l 66 arithmetic_expression: expression • PLUS expression\l 67                      | expression • MINUS expression\l 68                      | expression • MUL expression\l 69                      | expression • DIV expression\l 70                      | expression • MOD expression\l 71 assignment_expression: expression • ASSIGN expression\l 72                      | expression • ADD_ASSIGN expression\l 73                      | expression • SUB_ASSIGN expression\l 74                      | expression • MUL_ASSIGN expression\l 75                      | expression • DIV_ASSIGN expression\l 76                      | expression • MOD_ASSIGN expression\l 78 comparison_expression: expression • LT expression\l 79                      | expression • GT expression\l 80                      | expression • GTE expression\l 81                      | expression • LTE expression\l 82                      | expression • EQ expression\l 83                      | expression • NEQ expression\l 84 logical_expression: expression • AND expression\l 85                   | expression • OR expression\l147 wait_statement: CHANNEL_WAIT LBRACE IDENTIFIER COMMA expression • RBRACE\l148               | CHANNEL_WAIT LBRACE IDENTIFIER COMMA expression • RBRACE ARROW IDENTIFIER\l217 array_literal: expression • range expression\l"]
  387 -> 90 [style=solid label="ASSIGN"]
  387 -> 91 [style=solid label="PLUS"]
  387 -> 92 [style=solid label="MINUS"]
  387 -> 93 [style=solid label="MUL"]
  387 -> 94 [style=solid label="DIV"]
  387 -> 95 [style=solid label="MOD"]
  387 -> 96 [style=solid label="EQ"]
  387 -> 97 [style=solid label="NEQ"]
  387 -> 98 [style=solid label="GT"]
  387 -> 99 [style=solid label="LT"]
  387 -> 100 [style=solid label="GTE"]
  387 -> 101 [style=solid label="LTE"]
  387 -> 102 [style=solid label="AND"]
  387 -> 103 [style=solid label="OR"]
  387 -> 104 [style=solid label="ADD_ASSIGN"]
  387 -> 105 [style=solid label="SUB_ASSIGN"]
  387 -> 106 [style=solid label="MUL_ASSIGN"]
  387 -> 107 [style=solid label="DIV_ASSIGN"]
  387 -> 108 [style=solid label="MOD_ASSIGN"]
  387 -> 395 [style=solid label="RBRACE"]
  387 -> 110 [style=solid label="RANGE"]
  387 -> 111 [style=solid label="RANGE_INCL"]
  387 -> 112 [style=dashed label="range"]
  388 [label="State 388\n\l192 order_rule_start: ALL ARROW •\l"]
  388 -> "388R192" [style=solid]
 "388R192" [label="R192", fillcolor=3, shape=diamond, style=filled]
  389 [label="State 389\n\l191 order_rule: order_rule_start order_rule_mid • order_rule_end\l194 order_rule_mid: order_rule_mid • ARROW identifier_list\l"]
  389 -> 396 [style=solid label="SEMICOLON"]
  389 -> 397 [style=solid label="ARROW"]
  389 -> 398 [style=dashed label="order_rule_end"]
  390 [label="State 390\n\l195 order_rule_mid: identifier_list •\l198 identifier_list: identifier_list • COMMA IDENTIFIER\l"]
  390 -> 285 [style=solid label="COMMA"]
  390 -> "390R195" [style=solid]
 "390R195" [label="R195", fillcolor=3, shape=diamond, style=filled]
  391 [label="State 391\n\l208 mem_statement: identifier_list ARROW • mem_taskgroup_list SEMICOLON\l"]
  391 -> 399 [style=solid label="IDENTIFIER"]
  391 -> 400 [style=dashed label="mem_taskgroup_list"]
  391 -> 401 [style=dashed label="mem_taskgroup_name"]
  392 [label="State 392\n\l205 mem_block: MEM UNSAFE LBRACE mem_statement_list RBRACE •\l"]
  392 -> "392R205" [style=solid]
 "392R205" [label="R205", fillcolor=3, shape=diamond, style=filled]
  393 [label="State 393\n\l203 shared_rule: identifier_list COLON • dtype ARROW identifier_list SEMICOLON\l"]
  393 -> 1 [style=dotted]
  393 -> 9 [style=solid label="INT"]
  393 -> 10 [style=solid label="CHAR"]
  393 -> 11 [style=solid label="LONG"]
  393 -> 12 [style=solid label="BOOL"]
  393 -> 13 [style=solid label="FLOAT"]
  393 -> 14 [style=solid label="STRING"]
  393 -> 59 [style=solid label="STRUCT"]
  393 -> 29 [style=dashed label="generic_dtypes"]
  393 -> 402 [style=dashed label="dtype"]
  393 -> 31 [style=dashed label="array"]
  394 [label="State 394\n\l160 task_declaration: TASK IDENTIFIER LPAREN NUM_THREADS ASSIGN number RPAREN LBRACE task_statement_list RBRACE •\l"]
  394 -> "394R160" [style=solid]
 "394R160" [label="R160", fillcolor=3, shape=diamond, style=filled]
  395 [label="State 395\n\l147 wait_statement: CHANNEL_WAIT LBRACE IDENTIFIER COMMA expression RBRACE •\l148               | CHANNEL_WAIT LBRACE IDENTIFIER COMMA expression RBRACE • ARROW IDENTIFIER\l"]
  395 -> 403 [style=solid label="ARROW"]
  395 -> "395R147" [style=solid]
 "395R147" [label="R147", fillcolor=3, shape=diamond, style=filled]
  396 [label="State 396\n\l197 order_rule_end: SEMICOLON •\l"]
  396 -> "396R197" [style=solid]
 "396R197" [label="R197", fillcolor=3, shape=diamond, style=filled]
  397 [label="State 397\n\l194 order_rule_mid: order_rule_mid ARROW • identifier_list\l196 order_rule_end: ARROW • ALL SEMICOLON\l"]
  397 -> 404 [style=solid label="ALL"]
  397 -> 256 [style=solid label="IDENTIFIER"]
  397 -> 405 [style=dashed label="identifier_list"]
  398 [label="State 398\n\l191 order_rule: order_rule_start order_rule_mid order_rule_end •\l"]
  398 -> "398R191" [style=solid]
 "398R191" [label="R191", fillcolor=3, shape=diamond, style=filled]
  399 [label="State 399\n\l211 mem_taskgroup_name: IDENTIFIER •\l212                   | IDENTIFIER • MUT\l"]
  399 -> 406 [style=solid label="MUT"]
  399 -> "399R211" [style=solid]
 "399R211" [label="R211", fillcolor=3, shape=diamond, style=filled]
  400 [label="State 400\n\l208 mem_statement: identifier_list ARROW mem_taskgroup_list • SEMICOLON\l209 mem_taskgroup_list: mem_taskgroup_list • COMMA mem_taskgroup_name\l"]
  400 -> 407 [style=solid label="SEMICOLON"]
  400 -> 408 [style=solid label="COMMA"]
  401 [label="State 401\n\l210 mem_taskgroup_list: mem_taskgroup_name •\l"]
  401 -> "401R210" [style=solid]
 "401R210" [label="R210", fillcolor=3, shape=diamond, style=filled]
  402 [label="State 402\n\l203 shared_rule: identifier_list COLON dtype • ARROW identifier_list SEMICOLON\l"]
  402 -> 409 [style=solid label="ARROW"]
  403 [label="State 403\n\l148 wait_statement: CHANNEL_WAIT LBRACE IDENTIFIER COMMA expression RBRACE ARROW • IDENTIFIER\l"]
  403 -> 410 [style=solid label="IDENTIFIER"]
  404 [label="State 404\n\l196 order_rule_end: ARROW ALL • SEMICOLON\l"]
  404 -> 411 [style=solid label="SEMICOLON"]
  405 [label="State 405\n\l194 order_rule_mid: order_rule_mid ARROW identifier_list •\l198 identifier_list: identifier_list • COMMA IDENTIFIER\l"]
  405 -> 285 [style=solid label="COMMA"]
  405 -> "405R194" [style=solid]
 "405R194" [label="R194", fillcolor=3, shape=diamond, style=filled]
  406 [label="State 406\n\l212 mem_taskgroup_name: IDENTIFIER MUT •\l"]
  406 -> "406R212" [style=solid]
 "406R212" [label="R212", fillcolor=3, shape=diamond, style=filled]
  407 [label="State 407\n\l208 mem_statement: identifier_list ARROW mem_taskgroup_list SEMICOLON •\l"]
  407 -> "407R208" [style=solid]
 "407R208" [label="R208", fillcolor=3, shape=diamond, style=filled]
  408 [label="State 408\n\l209 mem_taskgroup_list: mem_taskgroup_list COMMA • mem_taskgroup_name\l"]
  408 -> 399 [style=solid label="IDENTIFIER"]
  408 -> 412 [style=dashed label="mem_taskgroup_name"]
  409 [label="State 409\n\l203 shared_rule: identifier_list COLON dtype ARROW • identifier_list SEMICOLON\l"]
  409 -> 256 [style=solid label="IDENTIFIER"]
  409 -> 413 [style=dashed label="identifier_list"]
  410 [label="State 410\n\l148 wait_statement: CHANNEL_WAIT LBRACE IDENTIFIER COMMA expression RBRACE ARROW IDENTIFIER •\l"]
  410 -> "410R148" [style=solid]
 "410R148" [label="R148", fillcolor=3, shape=diamond, style=filled]
  411 [label="State 411\n\l196 order_rule_end: ARROW ALL SEMICOLON •\l"]
  411 -> "411R196" [style=solid]
 "411R196" [label="R196", fillcolor=3, shape=diamond, style=filled]
  412 [label="State 412\n\l209 mem_taskgroup_list: mem_taskgroup_list COMMA mem_taskgroup_name •\l"]
  412 -> "412R209" [style=solid]
 "412R209" [label="R209", fillcolor=3, shape=diamond, style=filled]
  413 [label="State 413\n\l198 identifier_list: identifier_list • COMMA IDENTIFIER\l203 shared_rule: identifier_list COLON dtype ARROW identifier_list • SEMICOLON\l"]
  413 -> 414 [style=solid label="SEMICOLON"]
  413 -> 285 [style=solid label="COMMA"]
  414 [label="State 414\n\l203 shared_rule: identifier_list COLON dtype ARROW identifier_list SEMICOLON •\l"]
  414 -> "414R203" [style=solid]
 "414R203" [label="R203", fillcolor=3, shape=diamond, style=filled]
}
